// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`samples array renders with a defaultForSchema model 1`] = `
Array [
  <p
    form={
      Object {
        "align": "left",
        "color": "secondary",
        "description": "Array Example. Try adding a couple of forms, reorder by drag'n'drop.",
        "type": "help",
        "variant": "h4",
      }
    }
  >
    Array Example. Try adding a couple of forms, reorder by drag'n'drop.
  </p>,
  <div>
    <button
      onClick={[Function]}
    >
      add
    </button>
    <ul />
  </div>,
]
`;

exports[`samples array renders with the MaterialUI decorator 1`] = `
Array [
  <h4
    className="MuiTypography-root MuiTypography-h4 MuiTypography-colorSecondary MuiTypography-alignLeft"
  >
    Array Example. Try adding a couple of forms, reorder by drag'n'drop.
  </h4>,
  <div
    className="MuiPaper-root MuiCard-root makeStyles-root-1 MuiPaper-elevation1 MuiPaper-rounded"
  >
    <div
      className="MuiFormControl-root MuiFormControl-fullWidth"
    >
      <header
        className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
      >
        <div
          className="MuiToolbar-root MuiToolbar-dense MuiToolbar-gutters"
        >
          <h6
            className="MuiTypography-root makeStyles-title-2 MuiTypography-h6"
          >
            Comments
          </h6>
          <button
            className="MuiButtonBase-root MuiIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={0}
            type="button"
          >
            <span
              className="MuiIconButton-label"
            >
              <span
                aria-hidden={true}
                className="material-icons MuiIcon-root"
              >
                add
              </span>
            </span>
          </button>
        </div>
      </header>
      <ul
        className="MuiList-root MuiList-padding"
      />
    </div>
  </div>,
]
`;

exports[`samples array renders with the barebones decorator 1`] = `
Array [
  <p
    form={
      Object {
        "align": "left",
        "color": "secondary",
        "description": "Array Example. Try adding a couple of forms, reorder by drag'n'drop.",
        "type": "help",
        "variant": "h4",
      }
    }
  >
    Array Example. Try adding a couple of forms, reorder by drag'n'drop.
  </p>,
  <div>
    <button
      onClick={[Function]}
    >
      add
    </button>
    <ul />
  </div>,
]
`;

exports[`samples arrayselect renders with a defaultForSchema model 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      error="should NOT have fewer than 2 items"
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "accessLevel",
                Symbol(rjsf:array:placeholder),
              ],
              "schema": Object {
                "enum": Array [
                  "A",
                  "N",
                  "C",
                  "R",
                  "U",
                  "CR",
                  "CU",
                  "RU",
                  "CRU",
                ],
                "type": "string",
              },
              "title": "",
              "titleMap": Array [
                Object {
                  "name": "A",
                  "value": "A",
                },
                Object {
                  "name": "N",
                  "value": "N",
                },
                Object {
                  "name": "C",
                  "value": "C",
                },
                Object {
                  "name": "R",
                  "value": "R",
                },
                Object {
                  "name": "U",
                  "value": "U",
                },
                Object {
                  "name": "CR",
                  "value": "CR",
                },
                Object {
                  "name": "CU",
                  "value": "CU",
                },
                Object {
                  "name": "RU",
                  "value": "RU",
                },
                Object {
                  "name": "CRU",
                  "value": "CRU",
                },
              ],
              "titles": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "select",
            },
          ],
          "key": Array [
            "accessLevel",
          ],
          "schema": Object {
            "items": Object {
              "enum": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "string",
            },
            "maxItems": 3,
            "minItems": 2,
            "title": "Access Level",
            "type": "array",
          },
          "title": "Access Level",
          "titleMap": Array [
            Object {
              "name": "Authorized to anyone",
              "value": "A",
            },
            Object {
              "name": "Not Accessible",
              "value": "N",
            },
            Object {
              "name": "Client Based",
              "value": "C",
            },
            Object {
              "name": "Role Based",
              "value": "R",
            },
            Object {
              "name": "User Based",
              "value": "U",
            },
            Object {
              "name": "Client and Role Based",
              "value": "CR",
            },
            Object {
              "name": "Client and User Based",
              "value": "CU",
            },
            Object {
              "name": "Role and User Based",
              "value": "RU",
            },
            Object {
              "name": "Client, Role and User Based",
              "value": "CRU",
            },
          ],
          "type": "multiselect",
        }
      }
      value={Array []}
    >
      Access Level
    </label>
    <select
      error="should NOT have fewer than 2 items"
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "accessLevel",
                Symbol(rjsf:array:placeholder),
              ],
              "schema": Object {
                "enum": Array [
                  "A",
                  "N",
                  "C",
                  "R",
                  "U",
                  "CR",
                  "CU",
                  "RU",
                  "CRU",
                ],
                "type": "string",
              },
              "title": "",
              "titleMap": Array [
                Object {
                  "name": "A",
                  "value": "A",
                },
                Object {
                  "name": "N",
                  "value": "N",
                },
                Object {
                  "name": "C",
                  "value": "C",
                },
                Object {
                  "name": "R",
                  "value": "R",
                },
                Object {
                  "name": "U",
                  "value": "U",
                },
                Object {
                  "name": "CR",
                  "value": "CR",
                },
                Object {
                  "name": "CU",
                  "value": "CU",
                },
                Object {
                  "name": "RU",
                  "value": "RU",
                },
                Object {
                  "name": "CRU",
                  "value": "CRU",
                },
              ],
              "titles": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "select",
            },
          ],
          "key": Array [
            "accessLevel",
          ],
          "schema": Object {
            "items": Object {
              "enum": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "string",
            },
            "maxItems": 3,
            "minItems": 2,
            "title": "Access Level",
            "type": "array",
          },
          "title": "Access Level",
          "titleMap": Array [
            Object {
              "name": "Authorized to anyone",
              "value": "A",
            },
            Object {
              "name": "Not Accessible",
              "value": "N",
            },
            Object {
              "name": "Client Based",
              "value": "C",
            },
            Object {
              "name": "Role Based",
              "value": "R",
            },
            Object {
              "name": "User Based",
              "value": "U",
            },
            Object {
              "name": "Client and Role Based",
              "value": "CR",
            },
            Object {
              "name": "Client and User Based",
              "value": "CU",
            },
            Object {
              "name": "Role and User Based",
              "value": "RU",
            },
            Object {
              "name": "Client, Role and User Based",
              "value": "CRU",
            },
          ],
          "type": "multiselect",
        }
      }
      multiple={true}
      onChange={[Function]}
      value={Array []}
    >
      <option
        value="A"
      >
        Authorized to anyone
      </option>
      <option
        value="N"
      >
        Not Accessible
      </option>
      <option
        value="C"
      >
        Client Based
      </option>
      <option
        value="R"
      >
        Role Based
      </option>
      <option
        value="U"
      >
        User Based
      </option>
      <option
        value="CR"
      >
        Client and Role Based
      </option>
      <option
        value="CU"
      >
        Client and User Based
      </option>
      <option
        value="RU"
      >
        Role and User Based
      </option>
      <option
        value="CRU"
      >
        Client, Role and User Based
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "accessLevel",
                Symbol(rjsf:array:placeholder),
              ],
              "schema": Object {
                "enum": Array [
                  "A",
                  "N",
                  "C",
                  "R",
                  "U",
                  "CR",
                  "CU",
                  "RU",
                  "CRU",
                ],
                "type": "string",
              },
              "title": "",
              "titleMap": Array [
                Object {
                  "name": "A",
                  "value": "A",
                },
                Object {
                  "name": "N",
                  "value": "N",
                },
                Object {
                  "name": "C",
                  "value": "C",
                },
                Object {
                  "name": "R",
                  "value": "R",
                },
                Object {
                  "name": "U",
                  "value": "U",
                },
                Object {
                  "name": "CR",
                  "value": "CR",
                },
                Object {
                  "name": "CU",
                  "value": "CU",
                },
                Object {
                  "name": "RU",
                  "value": "RU",
                },
                Object {
                  "name": "CRU",
                  "value": "CRU",
                },
              ],
              "titles": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "select",
            },
          ],
          "key": Array [
            "accessLevel",
          ],
          "schema": Object {
            "items": Object {
              "enum": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "string",
            },
            "maxItems": 3,
            "minItems": 2,
            "title": "Access Level",
            "type": "array",
          },
          "title": "Access Level",
          "titleMap": Array [
            Object {
              "name": "Authorized to anyone",
              "value": "A",
            },
            Object {
              "name": "Not Accessible",
              "value": "N",
            },
            Object {
              "name": "Client Based",
              "value": "C",
            },
            Object {
              "name": "Role Based",
              "value": "R",
            },
            Object {
              "name": "User Based",
              "value": "U",
            },
            Object {
              "name": "Client and Role Based",
              "value": "CR",
            },
            Object {
              "name": "Client and User Based",
              "value": "CU",
            },
            Object {
              "name": "Role and User Based",
              "value": "RU",
            },
            Object {
              "name": "Client, Role and User Based",
              "value": "CRU",
            },
          ],
          "type": "multiselect",
        }
      }
      value={Array []}
    >
      should NOT have fewer than 2 items
    </p>
  </div>,
]
`;

exports[`samples arrayselect renders with the MaterialUI decorator 1`] = `
Array [
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "name",
        ],
        "schema": Object {
          "title": "Name",
          "type": "string",
        },
        "title": "Name",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "items": Array [
          Object {
            "key": Array [
              "accessLevel",
              Symbol(rjsf:array:placeholder),
            ],
            "schema": Object {
              "enum": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "string",
            },
            "title": "",
            "titleMap": Array [
              Object {
                "name": "A",
                "value": "A",
              },
              Object {
                "name": "N",
                "value": "N",
              },
              Object {
                "name": "C",
                "value": "C",
              },
              Object {
                "name": "R",
                "value": "R",
              },
              Object {
                "name": "U",
                "value": "U",
              },
              Object {
                "name": "CR",
                "value": "CR",
              },
              Object {
                "name": "CU",
                "value": "CU",
              },
              Object {
                "name": "RU",
                "value": "RU",
              },
              Object {
                "name": "CRU",
                "value": "CRU",
              },
            ],
            "titles": Array [
              "A",
              "N",
              "C",
              "R",
              "U",
              "CR",
              "CU",
              "RU",
              "CRU",
            ],
            "type": "select",
          },
        ],
        "key": Array [
          "accessLevel",
        ],
        "schema": Object {
          "items": Object {
            "enum": Array [
              "A",
              "N",
              "C",
              "R",
              "U",
              "CR",
              "CU",
              "RU",
              "CRU",
            ],
            "type": "string",
          },
          "maxItems": 3,
          "minItems": 2,
          "title": "Access Level",
          "type": "array",
        },
        "title": "Access Level",
        "titleMap": Array [
          Object {
            "name": "Authorized to anyone",
            "value": "A",
          },
          Object {
            "name": "Not Accessible",
            "value": "N",
          },
          Object {
            "name": "Client Based",
            "value": "C",
          },
          Object {
            "name": "Role Based",
            "value": "R",
          },
          Object {
            "name": "User Based",
            "value": "U",
          },
          Object {
            "name": "Client and Role Based",
            "value": "CR",
          },
          Object {
            "name": "Client and User Based",
            "value": "CU",
          },
          Object {
            "name": "Role and User Based",
            "value": "RU",
          },
          Object {
            "name": "Client, Role and User Based",
            "value": "CRU",
          },
        ],
        "type": "multiselect",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink Mui-error Mui-error"
      data-shrink={true}
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "accessLevel",
                Symbol(rjsf:array:placeholder),
              ],
              "schema": Object {
                "enum": Array [
                  "A",
                  "N",
                  "C",
                  "R",
                  "U",
                  "CR",
                  "CU",
                  "RU",
                  "CRU",
                ],
                "type": "string",
              },
              "title": "",
              "titleMap": Array [
                Object {
                  "name": "A",
                  "value": "A",
                },
                Object {
                  "name": "N",
                  "value": "N",
                },
                Object {
                  "name": "C",
                  "value": "C",
                },
                Object {
                  "name": "R",
                  "value": "R",
                },
                Object {
                  "name": "U",
                  "value": "U",
                },
                Object {
                  "name": "CR",
                  "value": "CR",
                },
                Object {
                  "name": "CU",
                  "value": "CU",
                },
                Object {
                  "name": "RU",
                  "value": "RU",
                },
                Object {
                  "name": "CRU",
                  "value": "CRU",
                },
              ],
              "titles": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "select",
            },
          ],
          "key": Array [
            "accessLevel",
          ],
          "schema": Object {
            "items": Object {
              "enum": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "string",
            },
            "maxItems": 3,
            "minItems": 2,
            "title": "Access Level",
            "type": "array",
          },
          "title": "Access Level",
          "titleMap": Array [
            Object {
              "name": "Authorized to anyone",
              "value": "A",
            },
            Object {
              "name": "Not Accessible",
              "value": "N",
            },
            Object {
              "name": "Client Based",
              "value": "C",
            },
            Object {
              "name": "Role Based",
              "value": "R",
            },
            Object {
              "name": "User Based",
              "value": "U",
            },
            Object {
              "name": "Client and Role Based",
              "value": "CR",
            },
            Object {
              "name": "Client and User Based",
              "value": "CU",
            },
            Object {
              "name": "Role and User Based",
              "value": "RU",
            },
            Object {
              "name": "Client, Role and User Based",
              "value": "CRU",
            },
          ],
          "type": "multiselect",
        }
      }
      value={Array []}
    >
      Access Level
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "accessLevel",
                Symbol(rjsf:array:placeholder),
              ],
              "schema": Object {
                "enum": Array [
                  "A",
                  "N",
                  "C",
                  "R",
                  "U",
                  "CR",
                  "CU",
                  "RU",
                  "CRU",
                ],
                "type": "string",
              },
              "title": "",
              "titleMap": Array [
                Object {
                  "name": "A",
                  "value": "A",
                },
                Object {
                  "name": "N",
                  "value": "N",
                },
                Object {
                  "name": "C",
                  "value": "C",
                },
                Object {
                  "name": "R",
                  "value": "R",
                },
                Object {
                  "name": "U",
                  "value": "U",
                },
                Object {
                  "name": "CR",
                  "value": "CR",
                },
                Object {
                  "name": "CU",
                  "value": "CU",
                },
                Object {
                  "name": "RU",
                  "value": "RU",
                },
                Object {
                  "name": "CRU",
                  "value": "CRU",
                },
              ],
              "titles": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "select",
            },
          ],
          "key": Array [
            "accessLevel",
          ],
          "schema": Object {
            "items": Object {
              "enum": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "string",
            },
            "maxItems": 3,
            "minItems": 2,
            "title": "Access Level",
            "type": "array",
          },
          "title": "Access Level",
          "titleMap": Array [
            Object {
              "name": "Authorized to anyone",
              "value": "A",
            },
            Object {
              "name": "Not Accessible",
              "value": "N",
            },
            Object {
              "name": "Client Based",
              "value": "C",
            },
            Object {
              "name": "Role Based",
              "value": "R",
            },
            Object {
              "name": "User Based",
              "value": "U",
            },
            Object {
              "name": "Client and Role Based",
              "value": "CR",
            },
            Object {
              "name": "Client and User Based",
              "value": "CU",
            },
            Object {
              "name": "Role and User Based",
              "value": "RU",
            },
            Object {
              "name": "Client, Role and User Based",
              "value": "CRU",
            },
          ],
          "type": "multiselect",
        }
      }
      onClick={[Function]}
    >
      <div
        aria-haspopup="listbox"
        className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        role="button"
        tabIndex={0}
      >
        <span
          dangerouslySetInnerHTML={
            Object {
              "__html": "&#8203;",
            }
          }
        />
      </div>
      <input
        aria-hidden={true}
        className="MuiSelect-nativeInput"
        onAnimationStart={[Function]}
        onChange={[Function]}
        required={false}
        tabIndex={-1}
        value=""
      />
      <svg
        aria-hidden={true}
        className="MuiSvgIcon-root MuiSelect-icon"
        focusable="false"
        viewBox="0 0 24 24"
      >
        <path
          d="M7 10l5 5 5-5z"
        />
      </svg>
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "accessLevel",
                Symbol(rjsf:array:placeholder),
              ],
              "schema": Object {
                "enum": Array [
                  "A",
                  "N",
                  "C",
                  "R",
                  "U",
                  "CR",
                  "CU",
                  "RU",
                  "CRU",
                ],
                "type": "string",
              },
              "title": "",
              "titleMap": Array [
                Object {
                  "name": "A",
                  "value": "A",
                },
                Object {
                  "name": "N",
                  "value": "N",
                },
                Object {
                  "name": "C",
                  "value": "C",
                },
                Object {
                  "name": "R",
                  "value": "R",
                },
                Object {
                  "name": "U",
                  "value": "U",
                },
                Object {
                  "name": "CR",
                  "value": "CR",
                },
                Object {
                  "name": "CU",
                  "value": "CU",
                },
                Object {
                  "name": "RU",
                  "value": "RU",
                },
                Object {
                  "name": "CRU",
                  "value": "CRU",
                },
              ],
              "titles": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "select",
            },
          ],
          "key": Array [
            "accessLevel",
          ],
          "schema": Object {
            "items": Object {
              "enum": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "string",
            },
            "maxItems": 3,
            "minItems": 2,
            "title": "Access Level",
            "type": "array",
          },
          "title": "Access Level",
          "titleMap": Array [
            Object {
              "name": "Authorized to anyone",
              "value": "A",
            },
            Object {
              "name": "Not Accessible",
              "value": "N",
            },
            Object {
              "name": "Client Based",
              "value": "C",
            },
            Object {
              "name": "Role Based",
              "value": "R",
            },
            Object {
              "name": "User Based",
              "value": "U",
            },
            Object {
              "name": "Client and Role Based",
              "value": "CR",
            },
            Object {
              "name": "Client and User Based",
              "value": "CU",
            },
            Object {
              "name": "Role and User Based",
              "value": "RU",
            },
            Object {
              "name": "Client, Role and User Based",
              "value": "CRU",
            },
          ],
          "type": "multiselect",
        }
      }
      value={Array []}
    >
      should NOT have fewer than 2 items
    </p>
  </div>,
]
`;

exports[`samples arrayselect renders with the barebones decorator 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      error="should NOT have fewer than 2 items"
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "accessLevel",
                Symbol(rjsf:array:placeholder),
              ],
              "schema": Object {
                "enum": Array [
                  "A",
                  "N",
                  "C",
                  "R",
                  "U",
                  "CR",
                  "CU",
                  "RU",
                  "CRU",
                ],
                "type": "string",
              },
              "title": "",
              "titleMap": Array [
                Object {
                  "name": "A",
                  "value": "A",
                },
                Object {
                  "name": "N",
                  "value": "N",
                },
                Object {
                  "name": "C",
                  "value": "C",
                },
                Object {
                  "name": "R",
                  "value": "R",
                },
                Object {
                  "name": "U",
                  "value": "U",
                },
                Object {
                  "name": "CR",
                  "value": "CR",
                },
                Object {
                  "name": "CU",
                  "value": "CU",
                },
                Object {
                  "name": "RU",
                  "value": "RU",
                },
                Object {
                  "name": "CRU",
                  "value": "CRU",
                },
              ],
              "titles": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "select",
            },
          ],
          "key": Array [
            "accessLevel",
          ],
          "schema": Object {
            "items": Object {
              "enum": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "string",
            },
            "maxItems": 3,
            "minItems": 2,
            "title": "Access Level",
            "type": "array",
          },
          "title": "Access Level",
          "titleMap": Array [
            Object {
              "name": "Authorized to anyone",
              "value": "A",
            },
            Object {
              "name": "Not Accessible",
              "value": "N",
            },
            Object {
              "name": "Client Based",
              "value": "C",
            },
            Object {
              "name": "Role Based",
              "value": "R",
            },
            Object {
              "name": "User Based",
              "value": "U",
            },
            Object {
              "name": "Client and Role Based",
              "value": "CR",
            },
            Object {
              "name": "Client and User Based",
              "value": "CU",
            },
            Object {
              "name": "Role and User Based",
              "value": "RU",
            },
            Object {
              "name": "Client, Role and User Based",
              "value": "CRU",
            },
          ],
          "type": "multiselect",
        }
      }
      value={Array []}
    >
      Access Level
    </label>
    <select
      error="should NOT have fewer than 2 items"
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "accessLevel",
                Symbol(rjsf:array:placeholder),
              ],
              "schema": Object {
                "enum": Array [
                  "A",
                  "N",
                  "C",
                  "R",
                  "U",
                  "CR",
                  "CU",
                  "RU",
                  "CRU",
                ],
                "type": "string",
              },
              "title": "",
              "titleMap": Array [
                Object {
                  "name": "A",
                  "value": "A",
                },
                Object {
                  "name": "N",
                  "value": "N",
                },
                Object {
                  "name": "C",
                  "value": "C",
                },
                Object {
                  "name": "R",
                  "value": "R",
                },
                Object {
                  "name": "U",
                  "value": "U",
                },
                Object {
                  "name": "CR",
                  "value": "CR",
                },
                Object {
                  "name": "CU",
                  "value": "CU",
                },
                Object {
                  "name": "RU",
                  "value": "RU",
                },
                Object {
                  "name": "CRU",
                  "value": "CRU",
                },
              ],
              "titles": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "select",
            },
          ],
          "key": Array [
            "accessLevel",
          ],
          "schema": Object {
            "items": Object {
              "enum": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "string",
            },
            "maxItems": 3,
            "minItems": 2,
            "title": "Access Level",
            "type": "array",
          },
          "title": "Access Level",
          "titleMap": Array [
            Object {
              "name": "Authorized to anyone",
              "value": "A",
            },
            Object {
              "name": "Not Accessible",
              "value": "N",
            },
            Object {
              "name": "Client Based",
              "value": "C",
            },
            Object {
              "name": "Role Based",
              "value": "R",
            },
            Object {
              "name": "User Based",
              "value": "U",
            },
            Object {
              "name": "Client and Role Based",
              "value": "CR",
            },
            Object {
              "name": "Client and User Based",
              "value": "CU",
            },
            Object {
              "name": "Role and User Based",
              "value": "RU",
            },
            Object {
              "name": "Client, Role and User Based",
              "value": "CRU",
            },
          ],
          "type": "multiselect",
        }
      }
      multiple={true}
      onChange={[Function]}
      value={Array []}
    >
      <option
        value="A"
      >
        Authorized to anyone
      </option>
      <option
        value="N"
      >
        Not Accessible
      </option>
      <option
        value="C"
      >
        Client Based
      </option>
      <option
        value="R"
      >
        Role Based
      </option>
      <option
        value="U"
      >
        User Based
      </option>
      <option
        value="CR"
      >
        Client and Role Based
      </option>
      <option
        value="CU"
      >
        Client and User Based
      </option>
      <option
        value="RU"
      >
        Role and User Based
      </option>
      <option
        value="CRU"
      >
        Client, Role and User Based
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "accessLevel",
                Symbol(rjsf:array:placeholder),
              ],
              "schema": Object {
                "enum": Array [
                  "A",
                  "N",
                  "C",
                  "R",
                  "U",
                  "CR",
                  "CU",
                  "RU",
                  "CRU",
                ],
                "type": "string",
              },
              "title": "",
              "titleMap": Array [
                Object {
                  "name": "A",
                  "value": "A",
                },
                Object {
                  "name": "N",
                  "value": "N",
                },
                Object {
                  "name": "C",
                  "value": "C",
                },
                Object {
                  "name": "R",
                  "value": "R",
                },
                Object {
                  "name": "U",
                  "value": "U",
                },
                Object {
                  "name": "CR",
                  "value": "CR",
                },
                Object {
                  "name": "CU",
                  "value": "CU",
                },
                Object {
                  "name": "RU",
                  "value": "RU",
                },
                Object {
                  "name": "CRU",
                  "value": "CRU",
                },
              ],
              "titles": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "select",
            },
          ],
          "key": Array [
            "accessLevel",
          ],
          "schema": Object {
            "items": Object {
              "enum": Array [
                "A",
                "N",
                "C",
                "R",
                "U",
                "CR",
                "CU",
                "RU",
                "CRU",
              ],
              "type": "string",
            },
            "maxItems": 3,
            "minItems": 2,
            "title": "Access Level",
            "type": "array",
          },
          "title": "Access Level",
          "titleMap": Array [
            Object {
              "name": "Authorized to anyone",
              "value": "A",
            },
            Object {
              "name": "Not Accessible",
              "value": "N",
            },
            Object {
              "name": "Client Based",
              "value": "C",
            },
            Object {
              "name": "Role Based",
              "value": "R",
            },
            Object {
              "name": "User Based",
              "value": "U",
            },
            Object {
              "name": "Client and Role Based",
              "value": "CR",
            },
            Object {
              "name": "Client and User Based",
              "value": "CU",
            },
            Object {
              "name": "Role and User Based",
              "value": "RU",
            },
            Object {
              "name": "Client, Role and User Based",
              "value": "CRU",
            },
          ],
          "type": "multiselect",
        }
      }
      value={Array []}
    >
      should NOT have fewer than 2 items
    </p>
  </div>,
]
`;

exports[`samples comment renders with a defaultForSchema model 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      error="should match pattern \\"^\\\\S+@\\\\S+$\\""
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
          },
          "title": "Email",
          "type": "text",
        }
      }
      value=""
    >
      Email
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
          },
          "title": "Email",
          "type": "text",
        }
      }
      value=""
    >
      should match pattern "^\\S+@\\S+$"
    </p>
  </div>,
  <div>
    <label>
      <input
        checked={true}
        onChange={[Function]}
        type="checkbox"
      />
      Yes I want spam.
    </label>
  </div>,
  <div>
    <label>
      <input
        checked={false}
        onChange={[Function]}
        type="checkbox"
      />
      Terms and Conditions
    </label>
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "rows": 20,
          "schema": Object {
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy!",
          },
          "title": "Comment",
          "type": "textarea",
          "validationMessage": "Don't be greedy!",
        }
      }
      value=""
    >
      Comment
    </label>
    <input
      onChange={[Function]}
      type="textarea"
      value=""
    />
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "enum": Array [
              "home",
              "work",
              "mobile",
              "fax",
              "etc",
            ],
            "title": "Type",
            "type": "string",
          },
          "title": "Type",
          "titleMap": Array [
            Object {
              "name": "Home",
              "value": "home",
            },
            Object {
              "name": "Work",
              "value": "work",
            },
            Object {
              "name": "Mobile",
              "value": "mobile",
            },
            Object {
              "name": "Fax",
              "value": "fax",
            },
            Object {
              "name": "Etc",
              "value": "etc",
            },
          ],
          "titles": Array [
            "home",
            "work",
            "mobile",
            "fax",
            "etc",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Type
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "enum": Array [
              "home",
              "work",
              "mobile",
              "fax",
              "etc",
            ],
            "title": "Type",
            "type": "string",
          },
          "title": "Type",
          "titleMap": Array [
            Object {
              "name": "Home",
              "value": "home",
            },
            Object {
              "name": "Work",
              "value": "work",
            },
            Object {
              "name": "Mobile",
              "value": "mobile",
            },
            Object {
              "name": "Fax",
              "value": "fax",
            },
            Object {
              "name": "Etc",
              "value": "etc",
            },
          ],
          "titles": Array [
            "home",
            "work",
            "mobile",
            "fax",
            "etc",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="home"
      >
        Home
      </option>
      <option
        value="work"
      >
        Work
      </option>
      <option
        value="mobile"
      >
        Mobile
      </option>
      <option
        value="fax"
      >
        Fax
      </option>
      <option
        value="etc"
      >
        Etc
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "enum": Array [
              "home",
              "work",
              "mobile",
              "fax",
              "etc",
            ],
            "title": "Type",
            "type": "string",
          },
          "title": "Type",
          "titleMap": Array [
            Object {
              "name": "Home",
              "value": "home",
            },
            Object {
              "name": "Work",
              "value": "work",
            },
            Object {
              "name": "Mobile",
              "value": "mobile",
            },
            Object {
              "name": "Fax",
              "value": "fax",
            },
            Object {
              "name": "Etc",
              "value": "etc",
            },
          ],
          "titles": Array [
            "home",
            "work",
            "mobile",
            "fax",
            "etc",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div>
    <button
      onClick={[Function]}
    >
      add
    </button>
    <ul />
  </div>,
]
`;

exports[`samples comment renders with the MaterialUI decorator 1`] = `
Array [
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "name",
        ],
        "schema": Object {
          "title": "Name",
          "type": "string",
        },
        "title": "Name",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "description": "Email will be used for evil.",
        "key": Array [
          "email",
        ],
        "schema": Object {
          "description": "Email will be used for evil.",
          "pattern": "^\\\\S+@\\\\S+$",
          "title": "Email",
          "type": "string",
        },
        "title": "Email",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
      data-shrink={false}
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
          },
          "title": "Email",
          "type": "text",
        }
      }
      value=""
    >
      Email
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
          },
          "title": "Email",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={true}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
          },
          "title": "Email",
          "type": "text",
        }
      }
      value=""
    >
      should match pattern "^\\S+@\\S+$"
    </p>
  </div>,
  <div
    className="MuiFormGroup-root MuiFormGroup-row"
  >
    <label
      className="MuiFormControlLabel-root"
    >
      <span
        aria-disabled={false}
        className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-3 MuiCheckbox-root MuiCheckbox-colorSecondary PrivateSwitchBase-checked-4 Mui-checked MuiIconButton-colorSecondary"
        onBlur={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={null}
      >
        <span
          className="MuiIconButton-label"
        >
          <input
            checked={true}
            className="PrivateSwitchBase-input-6"
            data-indeterminate={false}
            onChange={[Function]}
            type="checkbox"
          />
          <svg
            aria-hidden={true}
            className="MuiSvgIcon-root"
            focusable="false"
            viewBox="0 0 24 24"
          >
            <path
              d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
            />
          </svg>
        </span>
      </span>
      <span
        className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
      >
        Yes I want spam.
      </span>
    </label>
  </div>,
  <div
    className="MuiFormGroup-root MuiFormGroup-row"
  >
    <label
      className="MuiFormControlLabel-root"
    >
      <span
        aria-disabled={false}
        className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-3 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
        onBlur={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={null}
      >
        <span
          className="MuiIconButton-label"
        >
          <input
            checked={false}
            className="PrivateSwitchBase-input-6"
            data-indeterminate={false}
            onChange={[Function]}
            type="checkbox"
          />
          <svg
            aria-hidden={true}
            className="MuiSvgIcon-root"
            focusable="false"
            viewBox="0 0 24 24"
          >
            <path
              d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
            />
          </svg>
        </span>
      </span>
      <span
        className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
      >
        Terms and Conditions
      </span>
    </label>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "comment",
        ],
        "maxlength": 20,
        "rows": 20,
        "schema": Object {
          "maxLength": 20,
          "title": "Comment",
          "type": "string",
          "validationMessage": "Don't be greedy!",
        },
        "title": "Comment",
        "type": "textarea",
        "validationMessage": "Don't be greedy!",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "rows": 20,
          "schema": Object {
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy!",
          },
          "title": "Comment",
          "type": "textarea",
          "validationMessage": "Don't be greedy!",
        }
      }
      value=""
    >
      Comment
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-multiline MuiInput-multiline"
      form={
        Object {
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "rows": 20,
          "schema": Object {
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy!",
          },
          "title": "Comment",
          "type": "textarea",
          "validationMessage": "Don't be greedy!",
        }
      }
      onClick={[Function]}
    >
      <textarea
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input MuiInputBase-inputMultiline MuiInput-inputMultiline"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        rows={20}
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "type",
        ],
        "schema": Object {
          "enum": Array [
            "home",
            "work",
            "mobile",
            "fax",
            "etc",
          ],
          "title": "Type",
          "type": "string",
        },
        "title": "Type",
        "titleMap": Array [
          Object {
            "name": "Home",
            "value": "home",
          },
          Object {
            "name": "Work",
            "value": "work",
          },
          Object {
            "name": "Mobile",
            "value": "mobile",
          },
          Object {
            "name": "Fax",
            "value": "fax",
          },
          Object {
            "name": "Etc",
            "value": "etc",
          },
        ],
        "titles": Array [
          "home",
          "work",
          "mobile",
          "fax",
          "etc",
        ],
        "type": "select",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "enum": Array [
              "home",
              "work",
              "mobile",
              "fax",
              "etc",
            ],
            "title": "Type",
            "type": "string",
          },
          "title": "Type",
          "titleMap": Array [
            Object {
              "name": "Home",
              "value": "home",
            },
            Object {
              "name": "Work",
              "value": "work",
            },
            Object {
              "name": "Mobile",
              "value": "mobile",
            },
            Object {
              "name": "Fax",
              "value": "fax",
            },
            Object {
              "name": "Etc",
              "value": "etc",
            },
          ],
          "titles": Array [
            "home",
            "work",
            "mobile",
            "fax",
            "etc",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Type
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "enum": Array [
              "home",
              "work",
              "mobile",
              "fax",
              "etc",
            ],
            "title": "Type",
            "type": "string",
          },
          "title": "Type",
          "titleMap": Array [
            Object {
              "name": "Home",
              "value": "home",
            },
            Object {
              "name": "Work",
              "value": "work",
            },
            Object {
              "name": "Mobile",
              "value": "mobile",
            },
            Object {
              "name": "Fax",
              "value": "fax",
            },
            Object {
              "name": "Etc",
              "value": "etc",
            },
          ],
          "titles": Array [
            "home",
            "work",
            "mobile",
            "fax",
            "etc",
          ],
          "type": "select",
        }
      }
      onClick={[Function]}
    >
      <div
        aria-haspopup="listbox"
        className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        role="button"
        tabIndex={0}
      >
        <span
          dangerouslySetInnerHTML={
            Object {
              "__html": "&#8203;",
            }
          }
        />
      </div>
      <input
        aria-hidden={true}
        className="MuiSelect-nativeInput"
        onAnimationStart={[Function]}
        onChange={[Function]}
        required={false}
        tabIndex={-1}
        value=""
      />
      <svg
        aria-hidden={true}
        className="MuiSvgIcon-root MuiSelect-icon"
        focusable="false"
        viewBox="0 0 24 24"
      >
        <path
          d="M7 10l5 5 5-5z"
        />
      </svg>
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "enum": Array [
              "home",
              "work",
              "mobile",
              "fax",
              "etc",
            ],
            "title": "Type",
            "type": "string",
          },
          "title": "Type",
          "titleMap": Array [
            Object {
              "name": "Home",
              "value": "home",
            },
            Object {
              "name": "Work",
              "value": "work",
            },
            Object {
              "name": "Mobile",
              "value": "mobile",
            },
            Object {
              "name": "Fax",
              "value": "fax",
            },
            Object {
              "name": "Etc",
              "value": "etc",
            },
          ],
          "titles": Array [
            "home",
            "work",
            "mobile",
            "fax",
            "etc",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div
    className="MuiPaper-root MuiCard-root makeStyles-root-1 MuiPaper-elevation1 MuiPaper-rounded"
  >
    <div
      className="MuiFormControl-root MuiFormControl-fullWidth"
    >
      <header
        className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
      >
        <div
          className="MuiToolbar-root MuiToolbar-dense MuiToolbar-gutters"
        >
          <h6
            className="MuiTypography-root makeStyles-title-2 MuiTypography-h6"
          >
            Nested
          </h6>
          <button
            className="MuiButtonBase-root MuiIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={0}
            type="button"
          >
            <span
              className="MuiIconButton-label"
            >
              <span
                aria-hidden={true}
                className="material-icons MuiIcon-root"
              >
                add
              </span>
            </span>
          </button>
        </div>
      </header>
      <ul
        className="MuiList-root MuiList-padding"
      />
    </div>
  </div>,
]
`;

exports[`samples comment renders with the barebones decorator 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      error="should match pattern \\"^\\\\S+@\\\\S+$\\""
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
          },
          "title": "Email",
          "type": "text",
        }
      }
      value=""
    >
      Email
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
          },
          "title": "Email",
          "type": "text",
        }
      }
      value=""
    >
      should match pattern "^\\S+@\\S+$"
    </p>
  </div>,
  <div>
    <label>
      <input
        checked={true}
        onChange={[Function]}
        type="checkbox"
      />
      Yes I want spam.
    </label>
  </div>,
  <div>
    <label>
      <input
        checked={false}
        onChange={[Function]}
        type="checkbox"
      />
      Terms and Conditions
    </label>
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "rows": 20,
          "schema": Object {
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy!",
          },
          "title": "Comment",
          "type": "textarea",
          "validationMessage": "Don't be greedy!",
        }
      }
      value=""
    >
      Comment
    </label>
    <input
      onChange={[Function]}
      type="textarea"
      value=""
    />
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "enum": Array [
              "home",
              "work",
              "mobile",
              "fax",
              "etc",
            ],
            "title": "Type",
            "type": "string",
          },
          "title": "Type",
          "titleMap": Array [
            Object {
              "name": "Home",
              "value": "home",
            },
            Object {
              "name": "Work",
              "value": "work",
            },
            Object {
              "name": "Mobile",
              "value": "mobile",
            },
            Object {
              "name": "Fax",
              "value": "fax",
            },
            Object {
              "name": "Etc",
              "value": "etc",
            },
          ],
          "titles": Array [
            "home",
            "work",
            "mobile",
            "fax",
            "etc",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Type
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "enum": Array [
              "home",
              "work",
              "mobile",
              "fax",
              "etc",
            ],
            "title": "Type",
            "type": "string",
          },
          "title": "Type",
          "titleMap": Array [
            Object {
              "name": "Home",
              "value": "home",
            },
            Object {
              "name": "Work",
              "value": "work",
            },
            Object {
              "name": "Mobile",
              "value": "mobile",
            },
            Object {
              "name": "Fax",
              "value": "fax",
            },
            Object {
              "name": "Etc",
              "value": "etc",
            },
          ],
          "titles": Array [
            "home",
            "work",
            "mobile",
            "fax",
            "etc",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="home"
      >
        Home
      </option>
      <option
        value="work"
      >
        Work
      </option>
      <option
        value="mobile"
      >
        Mobile
      </option>
      <option
        value="fax"
      >
        Fax
      </option>
      <option
        value="etc"
      >
        Etc
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "enum": Array [
              "home",
              "work",
              "mobile",
              "fax",
              "etc",
            ],
            "title": "Type",
            "type": "string",
          },
          "title": "Type",
          "titleMap": Array [
            Object {
              "name": "Home",
              "value": "home",
            },
            Object {
              "name": "Work",
              "value": "work",
            },
            Object {
              "name": "Mobile",
              "value": "mobile",
            },
            Object {
              "name": "Fax",
              "value": "fax",
            },
            Object {
              "name": "Etc",
              "value": "etc",
            },
          ],
          "titles": Array [
            "home",
            "work",
            "mobile",
            "fax",
            "etc",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div>
    <button
      onClick={[Function]}
    >
      add
    </button>
    <ul />
  </div>,
]
`;

exports[`samples condition renders with a defaultForSchema model 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "firstName",
          ],
          "schema": Object {
            "title": "First Name",
            "type": "string",
          },
          "title": "First Name",
          "type": "text",
        }
      }
      value=""
    >
      First Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "lastName",
          ],
          "schema": Object {
            "title": "Last Name",
            "type": "string",
          },
          "title": "Last Name",
          "type": "text",
        }
      }
      value=""
    >
      Last Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "apartmentSuiteNumber",
          ],
          "schema": Object {
            "title": "Apartment/Suite Number",
            "type": "string",
          },
          "title": "Apartment/Suite Number",
          "type": "text",
        }
      }
      value=""
    >
      Apartment/Suite Number
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "address",
          ],
          "schema": Object {
            "title": "Address",
            "type": "string",
          },
          "title": "Address",
          "type": "text",
        }
      }
      value=""
    >
      Address
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please enter full city name",
          "key": Array [
            "city",
          ],
          "schema": Object {
            "description": "Please enter full city name",
            "title": "City",
            "type": "string",
          },
          "title": "City",
          "type": "text",
        }
      }
      value=""
    >
      City
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please enter full city name",
          "key": Array [
            "city",
          ],
          "schema": Object {
            "description": "Please enter full city name",
            "title": "City",
            "type": "string",
          },
          "title": "City",
          "type": "text",
        }
      }
      value=""
    >
      Please enter full city name
    </p>
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "postalCode",
          ],
          "schema": Object {
            "title": "Postal Code",
            "type": "string",
          },
          "title": "Postal Code",
          "type": "text",
        }
      }
      value=""
    >
      Postal Code
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please include area code",
          "key": Array [
            "phone",
          ],
          "schema": Object {
            "description": "Please include area code",
            "title": "Phone",
            "type": "string",
          },
          "title": "Phone",
          "type": "text",
        }
      }
      value=""
    >
      Phone
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please include area code",
          "key": Array [
            "phone",
          ],
          "schema": Object {
            "description": "Please include area code",
            "title": "Phone",
            "type": "string",
          },
          "title": "Phone",
          "type": "text",
        }
      }
      value=""
    >
      Please include area code
    </p>
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "country",
          ],
          "schema": Object {
            "enum": Array [
              "Canada",
            ],
            "title": "Country",
            "type": "string",
          },
          "title": "Country",
          "titleMap": Array [
            Object {
              "name": "Canada",
              "value": "Canada",
            },
          ],
          "titles": Array [
            "Canada",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Country
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "country",
          ],
          "schema": Object {
            "enum": Array [
              "Canada",
            ],
            "title": "Country",
            "type": "string",
          },
          "title": "Country",
          "titleMap": Array [
            Object {
              "name": "Canada",
              "value": "Canada",
            },
          ],
          "titles": Array [
            "Canada",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="Canada"
      >
        Canada
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "country",
          ],
          "schema": Object {
            "enum": Array [
              "Canada",
            ],
            "title": "Country",
            "type": "string",
          },
          "title": "Country",
          "titleMap": Array [
            Object {
              "name": "Canada",
              "value": "Canada",
            },
          ],
          "titles": Array [
            "Canada",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "province",
          ],
          "schema": Object {
            "enum": Array [
              "AB",
              "BC",
              "MB",
              "NB",
              "NF",
              "NS",
              "NT",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YK",
            ],
            "title": "Province",
            "type": "string",
          },
          "title": "Province",
          "titleMap": Array [
            Object {
              "name": "AB",
              "value": "AB",
            },
            Object {
              "name": "BC",
              "value": "BC",
            },
            Object {
              "name": "MB",
              "value": "MB",
            },
            Object {
              "name": "NB",
              "value": "NB",
            },
            Object {
              "name": "NF",
              "value": "NF",
            },
            Object {
              "name": "NS",
              "value": "NS",
            },
            Object {
              "name": "NT",
              "value": "NT",
            },
            Object {
              "name": "NU",
              "value": "NU",
            },
            Object {
              "name": "ON",
              "value": "ON",
            },
            Object {
              "name": "PE",
              "value": "PE",
            },
            Object {
              "name": "QC",
              "value": "QC",
            },
            Object {
              "name": "SK",
              "value": "SK",
            },
            Object {
              "name": "YK",
              "value": "YK",
            },
          ],
          "titles": Array [
            "AB",
            "BC",
            "MB",
            "NB",
            "NF",
            "NS",
            "NT",
            "NU",
            "ON",
            "PE",
            "QC",
            "SK",
            "YK",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Province
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "province",
          ],
          "schema": Object {
            "enum": Array [
              "AB",
              "BC",
              "MB",
              "NB",
              "NF",
              "NS",
              "NT",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YK",
            ],
            "title": "Province",
            "type": "string",
          },
          "title": "Province",
          "titleMap": Array [
            Object {
              "name": "AB",
              "value": "AB",
            },
            Object {
              "name": "BC",
              "value": "BC",
            },
            Object {
              "name": "MB",
              "value": "MB",
            },
            Object {
              "name": "NB",
              "value": "NB",
            },
            Object {
              "name": "NF",
              "value": "NF",
            },
            Object {
              "name": "NS",
              "value": "NS",
            },
            Object {
              "name": "NT",
              "value": "NT",
            },
            Object {
              "name": "NU",
              "value": "NU",
            },
            Object {
              "name": "ON",
              "value": "ON",
            },
            Object {
              "name": "PE",
              "value": "PE",
            },
            Object {
              "name": "QC",
              "value": "QC",
            },
            Object {
              "name": "SK",
              "value": "SK",
            },
            Object {
              "name": "YK",
              "value": "YK",
            },
          ],
          "titles": Array [
            "AB",
            "BC",
            "MB",
            "NB",
            "NF",
            "NS",
            "NT",
            "NU",
            "ON",
            "PE",
            "QC",
            "SK",
            "YK",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="AB"
      >
        AB
      </option>
      <option
        value="BC"
      >
        BC
      </option>
      <option
        value="MB"
      >
        MB
      </option>
      <option
        value="NB"
      >
        NB
      </option>
      <option
        value="NF"
      >
        NF
      </option>
      <option
        value="NS"
      >
        NS
      </option>
      <option
        value="NT"
      >
        NT
      </option>
      <option
        value="NU"
      >
        NU
      </option>
      <option
        value="ON"
      >
        ON
      </option>
      <option
        value="PE"
      >
        PE
      </option>
      <option
        value="QC"
      >
        QC
      </option>
      <option
        value="SK"
      >
        SK
      </option>
      <option
        value="YK"
      >
        YK
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "province",
          ],
          "schema": Object {
            "enum": Array [
              "AB",
              "BC",
              "MB",
              "NB",
              "NF",
              "NS",
              "NT",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YK",
            ],
            "title": "Province",
            "type": "string",
          },
          "title": "Province",
          "titleMap": Array [
            Object {
              "name": "AB",
              "value": "AB",
            },
            Object {
              "name": "BC",
              "value": "BC",
            },
            Object {
              "name": "MB",
              "value": "MB",
            },
            Object {
              "name": "NB",
              "value": "NB",
            },
            Object {
              "name": "NF",
              "value": "NF",
            },
            Object {
              "name": "NS",
              "value": "NS",
            },
            Object {
              "name": "NT",
              "value": "NT",
            },
            Object {
              "name": "NU",
              "value": "NU",
            },
            Object {
              "name": "ON",
              "value": "ON",
            },
            Object {
              "name": "PE",
              "value": "PE",
            },
            Object {
              "name": "QC",
              "value": "QC",
            },
            Object {
              "name": "SK",
              "value": "SK",
            },
            Object {
              "name": "YK",
              "value": "YK",
            },
          ],
          "titles": Array [
            "AB",
            "BC",
            "MB",
            "NB",
            "NF",
            "NS",
            "NT",
            "NU",
            "ON",
            "PE",
            "QC",
            "SK",
            "YK",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
]
`;

exports[`samples condition renders with the MaterialUI decorator 1`] = `
Array [
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "condition": "model.delivery === 'S'",
        "key": Array [
          "firstName",
        ],
        "schema": Object {
          "title": "First Name",
          "type": "string",
        },
        "title": "First Name",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "firstName",
          ],
          "schema": Object {
            "title": "First Name",
            "type": "string",
          },
          "title": "First Name",
          "type": "text",
        }
      }
      value=""
    >
      First Name
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "firstName",
          ],
          "schema": Object {
            "title": "First Name",
            "type": "string",
          },
          "title": "First Name",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "condition": "model.delivery === 'S'",
        "key": Array [
          "lastName",
        ],
        "schema": Object {
          "title": "Last Name",
          "type": "string",
        },
        "title": "Last Name",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "lastName",
          ],
          "schema": Object {
            "title": "Last Name",
            "type": "string",
          },
          "title": "Last Name",
          "type": "text",
        }
      }
      value=""
    >
      Last Name
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "lastName",
          ],
          "schema": Object {
            "title": "Last Name",
            "type": "string",
          },
          "title": "Last Name",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "condition": "model.delivery === 'S'",
        "key": Array [
          "apartmentSuiteNumber",
        ],
        "schema": Object {
          "title": "Apartment/Suite Number",
          "type": "string",
        },
        "title": "Apartment/Suite Number",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "apartmentSuiteNumber",
          ],
          "schema": Object {
            "title": "Apartment/Suite Number",
            "type": "string",
          },
          "title": "Apartment/Suite Number",
          "type": "text",
        }
      }
      value=""
    >
      Apartment/Suite Number
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "apartmentSuiteNumber",
          ],
          "schema": Object {
            "title": "Apartment/Suite Number",
            "type": "string",
          },
          "title": "Apartment/Suite Number",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "condition": "model.delivery === 'S'",
        "key": Array [
          "address",
        ],
        "schema": Object {
          "title": "Address",
          "type": "string",
        },
        "title": "Address",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "address",
          ],
          "schema": Object {
            "title": "Address",
            "type": "string",
          },
          "title": "Address",
          "type": "text",
        }
      }
      value=""
    >
      Address
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "address",
          ],
          "schema": Object {
            "title": "Address",
            "type": "string",
          },
          "title": "Address",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "condition": "model.delivery === 'S'",
        "description": "Please enter full city name",
        "key": Array [
          "city",
        ],
        "schema": Object {
          "description": "Please enter full city name",
          "title": "City",
          "type": "string",
        },
        "title": "City",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please enter full city name",
          "key": Array [
            "city",
          ],
          "schema": Object {
            "description": "Please enter full city name",
            "title": "City",
            "type": "string",
          },
          "title": "City",
          "type": "text",
        }
      }
      value=""
    >
      City
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please enter full city name",
          "key": Array [
            "city",
          ],
          "schema": Object {
            "description": "Please enter full city name",
            "title": "City",
            "type": "string",
          },
          "title": "City",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
    <p
      className="MuiFormHelperText-root"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please enter full city name",
          "key": Array [
            "city",
          ],
          "schema": Object {
            "description": "Please enter full city name",
            "title": "City",
            "type": "string",
          },
          "title": "City",
          "type": "text",
        }
      }
      value=""
    >
      Please enter full city name
    </p>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "condition": "model.delivery === 'S'",
        "key": Array [
          "postalCode",
        ],
        "schema": Object {
          "title": "Postal Code",
          "type": "string",
        },
        "title": "Postal Code",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "postalCode",
          ],
          "schema": Object {
            "title": "Postal Code",
            "type": "string",
          },
          "title": "Postal Code",
          "type": "text",
        }
      }
      value=""
    >
      Postal Code
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "postalCode",
          ],
          "schema": Object {
            "title": "Postal Code",
            "type": "string",
          },
          "title": "Postal Code",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "condition": "model.delivery === 'S'",
        "description": "Please include area code",
        "key": Array [
          "phone",
        ],
        "schema": Object {
          "description": "Please include area code",
          "title": "Phone",
          "type": "string",
        },
        "title": "Phone",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please include area code",
          "key": Array [
            "phone",
          ],
          "schema": Object {
            "description": "Please include area code",
            "title": "Phone",
            "type": "string",
          },
          "title": "Phone",
          "type": "text",
        }
      }
      value=""
    >
      Phone
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please include area code",
          "key": Array [
            "phone",
          ],
          "schema": Object {
            "description": "Please include area code",
            "title": "Phone",
            "type": "string",
          },
          "title": "Phone",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
    <p
      className="MuiFormHelperText-root"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please include area code",
          "key": Array [
            "phone",
          ],
          "schema": Object {
            "description": "Please include area code",
            "title": "Phone",
            "type": "string",
          },
          "title": "Phone",
          "type": "text",
        }
      }
      value=""
    >
      Please include area code
    </p>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "condition": "model.delivery === 'S'",
        "key": Array [
          "country",
        ],
        "schema": Object {
          "enum": Array [
            "Canada",
          ],
          "title": "Country",
          "type": "string",
        },
        "title": "Country",
        "titleMap": Array [
          Object {
            "name": "Canada",
            "value": "Canada",
          },
        ],
        "titles": Array [
          "Canada",
        ],
        "type": "select",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
      data-shrink={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "country",
          ],
          "schema": Object {
            "enum": Array [
              "Canada",
            ],
            "title": "Country",
            "type": "string",
          },
          "title": "Country",
          "titleMap": Array [
            Object {
              "name": "Canada",
              "value": "Canada",
            },
          ],
          "titles": Array [
            "Canada",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Country
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "country",
          ],
          "schema": Object {
            "enum": Array [
              "Canada",
            ],
            "title": "Country",
            "type": "string",
          },
          "title": "Country",
          "titleMap": Array [
            Object {
              "name": "Canada",
              "value": "Canada",
            },
          ],
          "titles": Array [
            "Canada",
          ],
          "type": "select",
        }
      }
      onClick={[Function]}
    >
      <div
        aria-haspopup="listbox"
        className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        role="button"
        tabIndex={0}
      >
        <span
          dangerouslySetInnerHTML={
            Object {
              "__html": "&#8203;",
            }
          }
        />
      </div>
      <input
        aria-hidden={true}
        className="MuiSelect-nativeInput"
        onAnimationStart={[Function]}
        onChange={[Function]}
        required={false}
        tabIndex={-1}
        value=""
      />
      <svg
        aria-hidden={true}
        className="MuiSvgIcon-root MuiSelect-icon"
        focusable="false"
        viewBox="0 0 24 24"
      >
        <path
          d="M7 10l5 5 5-5z"
        />
      </svg>
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "country",
          ],
          "schema": Object {
            "enum": Array [
              "Canada",
            ],
            "title": "Country",
            "type": "string",
          },
          "title": "Country",
          "titleMap": Array [
            Object {
              "name": "Canada",
              "value": "Canada",
            },
          ],
          "titles": Array [
            "Canada",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "condition": "model.delivery === 'S'",
        "key": Array [
          "province",
        ],
        "schema": Object {
          "enum": Array [
            "AB",
            "BC",
            "MB",
            "NB",
            "NF",
            "NS",
            "NT",
            "NU",
            "ON",
            "PE",
            "QC",
            "SK",
            "YK",
          ],
          "title": "Province",
          "type": "string",
        },
        "title": "Province",
        "titleMap": Array [
          Object {
            "name": "AB",
            "value": "AB",
          },
          Object {
            "name": "BC",
            "value": "BC",
          },
          Object {
            "name": "MB",
            "value": "MB",
          },
          Object {
            "name": "NB",
            "value": "NB",
          },
          Object {
            "name": "NF",
            "value": "NF",
          },
          Object {
            "name": "NS",
            "value": "NS",
          },
          Object {
            "name": "NT",
            "value": "NT",
          },
          Object {
            "name": "NU",
            "value": "NU",
          },
          Object {
            "name": "ON",
            "value": "ON",
          },
          Object {
            "name": "PE",
            "value": "PE",
          },
          Object {
            "name": "QC",
            "value": "QC",
          },
          Object {
            "name": "SK",
            "value": "SK",
          },
          Object {
            "name": "YK",
            "value": "YK",
          },
        ],
        "titles": Array [
          "AB",
          "BC",
          "MB",
          "NB",
          "NF",
          "NS",
          "NT",
          "NU",
          "ON",
          "PE",
          "QC",
          "SK",
          "YK",
        ],
        "type": "select",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
      data-shrink={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "province",
          ],
          "schema": Object {
            "enum": Array [
              "AB",
              "BC",
              "MB",
              "NB",
              "NF",
              "NS",
              "NT",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YK",
            ],
            "title": "Province",
            "type": "string",
          },
          "title": "Province",
          "titleMap": Array [
            Object {
              "name": "AB",
              "value": "AB",
            },
            Object {
              "name": "BC",
              "value": "BC",
            },
            Object {
              "name": "MB",
              "value": "MB",
            },
            Object {
              "name": "NB",
              "value": "NB",
            },
            Object {
              "name": "NF",
              "value": "NF",
            },
            Object {
              "name": "NS",
              "value": "NS",
            },
            Object {
              "name": "NT",
              "value": "NT",
            },
            Object {
              "name": "NU",
              "value": "NU",
            },
            Object {
              "name": "ON",
              "value": "ON",
            },
            Object {
              "name": "PE",
              "value": "PE",
            },
            Object {
              "name": "QC",
              "value": "QC",
            },
            Object {
              "name": "SK",
              "value": "SK",
            },
            Object {
              "name": "YK",
              "value": "YK",
            },
          ],
          "titles": Array [
            "AB",
            "BC",
            "MB",
            "NB",
            "NF",
            "NS",
            "NT",
            "NU",
            "ON",
            "PE",
            "QC",
            "SK",
            "YK",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Province
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "province",
          ],
          "schema": Object {
            "enum": Array [
              "AB",
              "BC",
              "MB",
              "NB",
              "NF",
              "NS",
              "NT",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YK",
            ],
            "title": "Province",
            "type": "string",
          },
          "title": "Province",
          "titleMap": Array [
            Object {
              "name": "AB",
              "value": "AB",
            },
            Object {
              "name": "BC",
              "value": "BC",
            },
            Object {
              "name": "MB",
              "value": "MB",
            },
            Object {
              "name": "NB",
              "value": "NB",
            },
            Object {
              "name": "NF",
              "value": "NF",
            },
            Object {
              "name": "NS",
              "value": "NS",
            },
            Object {
              "name": "NT",
              "value": "NT",
            },
            Object {
              "name": "NU",
              "value": "NU",
            },
            Object {
              "name": "ON",
              "value": "ON",
            },
            Object {
              "name": "PE",
              "value": "PE",
            },
            Object {
              "name": "QC",
              "value": "QC",
            },
            Object {
              "name": "SK",
              "value": "SK",
            },
            Object {
              "name": "YK",
              "value": "YK",
            },
          ],
          "titles": Array [
            "AB",
            "BC",
            "MB",
            "NB",
            "NF",
            "NS",
            "NT",
            "NU",
            "ON",
            "PE",
            "QC",
            "SK",
            "YK",
          ],
          "type": "select",
        }
      }
      onClick={[Function]}
    >
      <div
        aria-haspopup="listbox"
        className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        role="button"
        tabIndex={0}
      >
        <span
          dangerouslySetInnerHTML={
            Object {
              "__html": "&#8203;",
            }
          }
        />
      </div>
      <input
        aria-hidden={true}
        className="MuiSelect-nativeInput"
        onAnimationStart={[Function]}
        onChange={[Function]}
        required={false}
        tabIndex={-1}
        value=""
      />
      <svg
        aria-hidden={true}
        className="MuiSvgIcon-root MuiSelect-icon"
        focusable="false"
        viewBox="0 0 24 24"
      >
        <path
          d="M7 10l5 5 5-5z"
        />
      </svg>
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "province",
          ],
          "schema": Object {
            "enum": Array [
              "AB",
              "BC",
              "MB",
              "NB",
              "NF",
              "NS",
              "NT",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YK",
            ],
            "title": "Province",
            "type": "string",
          },
          "title": "Province",
          "titleMap": Array [
            Object {
              "name": "AB",
              "value": "AB",
            },
            Object {
              "name": "BC",
              "value": "BC",
            },
            Object {
              "name": "MB",
              "value": "MB",
            },
            Object {
              "name": "NB",
              "value": "NB",
            },
            Object {
              "name": "NF",
              "value": "NF",
            },
            Object {
              "name": "NS",
              "value": "NS",
            },
            Object {
              "name": "NT",
              "value": "NT",
            },
            Object {
              "name": "NU",
              "value": "NU",
            },
            Object {
              "name": "ON",
              "value": "ON",
            },
            Object {
              "name": "PE",
              "value": "PE",
            },
            Object {
              "name": "QC",
              "value": "QC",
            },
            Object {
              "name": "SK",
              "value": "SK",
            },
            Object {
              "name": "YK",
              "value": "YK",
            },
          ],
          "titles": Array [
            "AB",
            "BC",
            "MB",
            "NB",
            "NF",
            "NS",
            "NT",
            "NU",
            "ON",
            "PE",
            "QC",
            "SK",
            "YK",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
]
`;

exports[`samples condition renders with the barebones decorator 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "firstName",
          ],
          "schema": Object {
            "title": "First Name",
            "type": "string",
          },
          "title": "First Name",
          "type": "text",
        }
      }
      value=""
    >
      First Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "lastName",
          ],
          "schema": Object {
            "title": "Last Name",
            "type": "string",
          },
          "title": "Last Name",
          "type": "text",
        }
      }
      value=""
    >
      Last Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "apartmentSuiteNumber",
          ],
          "schema": Object {
            "title": "Apartment/Suite Number",
            "type": "string",
          },
          "title": "Apartment/Suite Number",
          "type": "text",
        }
      }
      value=""
    >
      Apartment/Suite Number
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "address",
          ],
          "schema": Object {
            "title": "Address",
            "type": "string",
          },
          "title": "Address",
          "type": "text",
        }
      }
      value=""
    >
      Address
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please enter full city name",
          "key": Array [
            "city",
          ],
          "schema": Object {
            "description": "Please enter full city name",
            "title": "City",
            "type": "string",
          },
          "title": "City",
          "type": "text",
        }
      }
      value=""
    >
      City
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please enter full city name",
          "key": Array [
            "city",
          ],
          "schema": Object {
            "description": "Please enter full city name",
            "title": "City",
            "type": "string",
          },
          "title": "City",
          "type": "text",
        }
      }
      value=""
    >
      Please enter full city name
    </p>
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "postalCode",
          ],
          "schema": Object {
            "title": "Postal Code",
            "type": "string",
          },
          "title": "Postal Code",
          "type": "text",
        }
      }
      value=""
    >
      Postal Code
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please include area code",
          "key": Array [
            "phone",
          ],
          "schema": Object {
            "description": "Please include area code",
            "title": "Phone",
            "type": "string",
          },
          "title": "Phone",
          "type": "text",
        }
      }
      value=""
    >
      Phone
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={false}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "description": "Please include area code",
          "key": Array [
            "phone",
          ],
          "schema": Object {
            "description": "Please include area code",
            "title": "Phone",
            "type": "string",
          },
          "title": "Phone",
          "type": "text",
        }
      }
      value=""
    >
      Please include area code
    </p>
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "country",
          ],
          "schema": Object {
            "enum": Array [
              "Canada",
            ],
            "title": "Country",
            "type": "string",
          },
          "title": "Country",
          "titleMap": Array [
            Object {
              "name": "Canada",
              "value": "Canada",
            },
          ],
          "titles": Array [
            "Canada",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Country
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "country",
          ],
          "schema": Object {
            "enum": Array [
              "Canada",
            ],
            "title": "Country",
            "type": "string",
          },
          "title": "Country",
          "titleMap": Array [
            Object {
              "name": "Canada",
              "value": "Canada",
            },
          ],
          "titles": Array [
            "Canada",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="Canada"
      >
        Canada
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "country",
          ],
          "schema": Object {
            "enum": Array [
              "Canada",
            ],
            "title": "Country",
            "type": "string",
          },
          "title": "Country",
          "titleMap": Array [
            Object {
              "name": "Canada",
              "value": "Canada",
            },
          ],
          "titles": Array [
            "Canada",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "province",
          ],
          "schema": Object {
            "enum": Array [
              "AB",
              "BC",
              "MB",
              "NB",
              "NF",
              "NS",
              "NT",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YK",
            ],
            "title": "Province",
            "type": "string",
          },
          "title": "Province",
          "titleMap": Array [
            Object {
              "name": "AB",
              "value": "AB",
            },
            Object {
              "name": "BC",
              "value": "BC",
            },
            Object {
              "name": "MB",
              "value": "MB",
            },
            Object {
              "name": "NB",
              "value": "NB",
            },
            Object {
              "name": "NF",
              "value": "NF",
            },
            Object {
              "name": "NS",
              "value": "NS",
            },
            Object {
              "name": "NT",
              "value": "NT",
            },
            Object {
              "name": "NU",
              "value": "NU",
            },
            Object {
              "name": "ON",
              "value": "ON",
            },
            Object {
              "name": "PE",
              "value": "PE",
            },
            Object {
              "name": "QC",
              "value": "QC",
            },
            Object {
              "name": "SK",
              "value": "SK",
            },
            Object {
              "name": "YK",
              "value": "YK",
            },
          ],
          "titles": Array [
            "AB",
            "BC",
            "MB",
            "NB",
            "NF",
            "NS",
            "NT",
            "NU",
            "ON",
            "PE",
            "QC",
            "SK",
            "YK",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Province
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "province",
          ],
          "schema": Object {
            "enum": Array [
              "AB",
              "BC",
              "MB",
              "NB",
              "NF",
              "NS",
              "NT",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YK",
            ],
            "title": "Province",
            "type": "string",
          },
          "title": "Province",
          "titleMap": Array [
            Object {
              "name": "AB",
              "value": "AB",
            },
            Object {
              "name": "BC",
              "value": "BC",
            },
            Object {
              "name": "MB",
              "value": "MB",
            },
            Object {
              "name": "NB",
              "value": "NB",
            },
            Object {
              "name": "NF",
              "value": "NF",
            },
            Object {
              "name": "NS",
              "value": "NS",
            },
            Object {
              "name": "NT",
              "value": "NT",
            },
            Object {
              "name": "NU",
              "value": "NU",
            },
            Object {
              "name": "ON",
              "value": "ON",
            },
            Object {
              "name": "PE",
              "value": "PE",
            },
            Object {
              "name": "QC",
              "value": "QC",
            },
            Object {
              "name": "SK",
              "value": "SK",
            },
            Object {
              "name": "YK",
              "value": "YK",
            },
          ],
          "titles": Array [
            "AB",
            "BC",
            "MB",
            "NB",
            "NF",
            "NS",
            "NT",
            "NU",
            "ON",
            "PE",
            "QC",
            "SK",
            "YK",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="AB"
      >
        AB
      </option>
      <option
        value="BC"
      >
        BC
      </option>
      <option
        value="MB"
      >
        MB
      </option>
      <option
        value="NB"
      >
        NB
      </option>
      <option
        value="NF"
      >
        NF
      </option>
      <option
        value="NS"
      >
        NS
      </option>
      <option
        value="NT"
      >
        NT
      </option>
      <option
        value="NU"
      >
        NU
      </option>
      <option
        value="ON"
      >
        ON
      </option>
      <option
        value="PE"
      >
        PE
      </option>
      <option
        value="QC"
      >
        QC
      </option>
      <option
        value="SK"
      >
        SK
      </option>
      <option
        value="YK"
      >
        YK
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "condition": "model.delivery === 'S'",
          "key": Array [
            "province",
          ],
          "schema": Object {
            "enum": Array [
              "AB",
              "BC",
              "MB",
              "NB",
              "NF",
              "NS",
              "NT",
              "NU",
              "ON",
              "PE",
              "QC",
              "SK",
              "YK",
            ],
            "title": "Province",
            "type": "string",
          },
          "title": "Province",
          "titleMap": Array [
            Object {
              "name": "AB",
              "value": "AB",
            },
            Object {
              "name": "BC",
              "value": "BC",
            },
            Object {
              "name": "MB",
              "value": "MB",
            },
            Object {
              "name": "NB",
              "value": "NB",
            },
            Object {
              "name": "NF",
              "value": "NF",
            },
            Object {
              "name": "NS",
              "value": "NS",
            },
            Object {
              "name": "NT",
              "value": "NT",
            },
            Object {
              "name": "NU",
              "value": "NU",
            },
            Object {
              "name": "ON",
              "value": "ON",
            },
            Object {
              "name": "PE",
              "value": "PE",
            },
            Object {
              "name": "QC",
              "value": "QC",
            },
            Object {
              "name": "SK",
              "value": "SK",
            },
            Object {
              "name": "YK",
              "value": "YK",
            },
          ],
          "titles": Array [
            "AB",
            "BC",
            "MB",
            "NB",
            "NF",
            "NS",
            "NT",
            "NU",
            "ON",
            "PE",
            "QC",
            "SK",
            "YK",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
]
`;

exports[`samples conditionalarray renders with a defaultForSchema model 1`] = `
<div>
  <button
    onClick={[Function]}
  >
    add
  </button>
  <ul />
</div>
`;

exports[`samples conditionalarray renders with the MaterialUI decorator 1`] = `
<div
  className="MuiPaper-root MuiCard-root makeStyles-root-1 MuiPaper-elevation1 MuiPaper-rounded"
>
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
  >
    <header
      className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
    >
      <div
        className="MuiToolbar-root MuiToolbar-dense MuiToolbar-gutters"
      >
        
        <button
          className="MuiButtonBase-root MuiIconButton-root"
          disabled={false}
          onBlur={[Function]}
          onClick={[Function]}
          onDragLeave={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          tabIndex={0}
          type="button"
        >
          <span
            className="MuiIconButton-label"
          >
            <span
              aria-hidden={true}
              className="material-icons MuiIcon-root"
            >
              add
            </span>
          </span>
        </button>
      </div>
    </header>
    <ul
      className="MuiList-root MuiList-padding"
    />
  </div>
</div>
`;

exports[`samples conditionalarray renders with the barebones decorator 1`] = `
<div>
  <button
    onClick={[Function]}
  >
    add
  </button>
  <ul />
</div>
`;

exports[`samples date renders with a defaultForSchema model 1`] = `
<div>
  <label
    form={
      Object {
        "key": Array [
          "date",
        ],
        "schema": Object {
          "title": "Birthday",
          "type": "string",
        },
        "title": "Birthday",
        "type": "date",
      }
    }
    value=""
  >
    Birthday
  </label>
  <input
    onChange={[Function]}
    type="date"
    value=""
  />
</div>
`;

exports[`samples date renders with the MaterialUI decorator 1`] = `
<div
  className="MuiFormControl-root MuiFormControl-fullWidth"
  form={
    Object {
      "key": Array [
        "date",
      ],
      "schema": Object {
        "title": "Birthday",
        "type": "string",
      },
      "title": "Birthday",
      "type": "date",
    }
  }
  value="1970-01-01T00:00:00Z"
>
  <label
    className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
    data-shrink={true}
    form={
      Object {
        "key": Array [
          "date",
        ],
        "schema": Object {
          "title": "Birthday",
          "type": "string",
        },
        "title": "Birthday",
        "type": "date",
      }
    }
    value="1970-01-01T00:00:00Z"
  >
    Birthday
  </label>
  <div
    className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
  >
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        autoFocus={false}
        className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value="1969-12-31T19:00:00-05:00"
      />
      <div
        className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
      >
        <button
          className="MuiButtonBase-root MuiIconButton-root"
          disabled={false}
          onBlur={[Function]}
          onClick={[Function]}
          onDragLeave={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          tabIndex={0}
          type="button"
        >
          <span
            className="MuiIconButton-label"
          >
            <svg
              aria-hidden={true}
              className="MuiSvgIcon-root"
              focusable="false"
              viewBox="0 0 24 24"
            >
              <path
                d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
              />
              <path
                d="M0 0h24v24H0z"
                fill="none"
              />
            </svg>
          </span>
        </button>
      </div>
    </div>
    
  </div>
</div>
`;

exports[`samples date renders with the barebones decorator 1`] = `
<div>
  <label
    form={
      Object {
        "key": Array [
          "date",
        ],
        "schema": Object {
          "title": "Birthday",
          "type": "string",
        },
        "title": "Birthday",
        "type": "date",
      }
    }
    value=""
  >
    Birthday
  </label>
  <input
    onChange={[Function]}
    type="date"
    value=""
  />
</div>
`;

exports[`samples datetime renders with a defaultForSchema model 1`] = `
Array [
  <div>
    
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "name",
          ],
          "minlength": 3,
          "schema": Object {
            "minLength": 3,
            "type": "string",
          },
          "title": "",
          "type": "text",
        }
      }
      value=""
    >
      should NOT be shorter than 3 characters
    </p>
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "date",
          ],
          "schema": Object {
            "title": "Date",
            "type": "string",
          },
          "title": "Date",
          "type": "datetime",
        }
      }
      value=""
    >
      Date
    </label>
    <input
      onChange={[Function]}
      type="datetime"
      value=""
    />
  </div>,
]
`;

exports[`samples datetime renders with the MaterialUI decorator 1`] = `
Array [
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "name",
        ],
        "minlength": 3,
        "schema": Object {
          "minLength": 3,
          "type": "string",
        },
        "title": "",
        "type": "text",
      }
    }
  >
    
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "name",
          ],
          "minlength": 3,
          "schema": Object {
            "minLength": 3,
            "type": "string",
          },
          "title": "",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={true}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "key": Array [
            "name",
          ],
          "minlength": 3,
          "schema": Object {
            "minLength": 3,
            "type": "string",
          },
          "title": "",
          "type": "text",
        }
      }
      value=""
    >
      should NOT be shorter than 3 characters
    </p>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "date",
        ],
        "schema": Object {
          "title": "Date",
          "type": "string",
        },
        "title": "Date",
        "type": "datetime",
      }
    }
    value="1970-01-01T00:00:00Z"
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
      data-shrink={true}
      form={
        Object {
          "key": Array [
            "date",
          ],
          "schema": Object {
            "title": "Date",
            "type": "string",
          },
          "title": "Date",
          "type": "datetime",
        }
      }
      value="1970-01-01T00:00:00Z"
    >
      Date
    </label>
    <div
      className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
    >
      <div
        className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
        onClick={[Function]}
      >
        <input
          aria-invalid={false}
          autoFocus={false}
          className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
          disabled={false}
          onAnimationStart={[Function]}
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          required={false}
          type="text"
          value="1969-12-31T19:00:00-05:00"
        />
        <div
          className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
        >
          <button
            className="MuiButtonBase-root MuiIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={0}
            type="button"
          >
            <span
              className="MuiIconButton-label"
            >
              <svg
                aria-hidden={true}
                className="MuiSvgIcon-root"
                focusable="false"
                viewBox="0 0 24 24"
              >
                <path
                  d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
                />
                <path
                  d="M0 0h24v24H0z"
                  fill="none"
                />
              </svg>
            </span>
          </button>
        </div>
      </div>
      
    </div>
  </div>,
]
`;

exports[`samples datetime renders with the barebones decorator 1`] = `
Array [
  <div>
    
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "name",
          ],
          "minlength": 3,
          "schema": Object {
            "minLength": 3,
            "type": "string",
          },
          "title": "",
          "type": "text",
        }
      }
      value=""
    >
      should NOT be shorter than 3 characters
    </p>
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "date",
          ],
          "schema": Object {
            "title": "Date",
            "type": "string",
          },
          "title": "Date",
          "type": "datetime",
        }
      }
      value=""
    >
      Date
    </label>
    <input
      onChange={[Function]}
      type="datetime"
      value=""
    />
  </div>,
]
`;

exports[`samples geopoint renders with a defaultForSchema model 1`] = `
Array [
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "default": Array [
              "Point",
            ],
            "enum": Array [
              "Point",
            ],
            "type": "string",
          },
          "title": "",
          "titleMap": Array [
            Object {
              "name": "Point",
              "value": "Point",
            },
          ],
          "titles": Array [
            "Point",
          ],
          "type": "select",
        }
      }
      value={
        Array [
          "Point",
        ]
      }
    >
      
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "default": Array [
              "Point",
            ],
            "enum": Array [
              "Point",
            ],
            "type": "string",
          },
          "title": "",
          "titleMap": Array [
            Object {
              "name": "Point",
              "value": "Point",
            },
          ],
          "titles": Array [
            "Point",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value={
        Array [
          "Point",
        ]
      }
    >
      <option
        value="Point"
      >
        Point
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "default": Array [
              "Point",
            ],
            "enum": Array [
              "Point",
            ],
            "type": "string",
          },
          "title": "",
          "titleMap": Array [
            Object {
              "name": "Point",
              "value": "Point",
            },
          ],
          "titles": Array [
            "Point",
          ],
          "type": "select",
        }
      }
      value={
        Array [
          "Point",
        ]
      }
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <fieldset>
    <legend>
      
    </legend>
    <div>
      <label
        focused={false}
        form={
          Object {
            "key": Array [
              "coordinates",
              0,
            ],
            "schema": Object {
              "title": "X",
              "type": "number",
            },
            "title": "X",
            "type": "number",
          }
        }
        htmlFor="['coordinates']['0']"
        value={0}
      >
        X
      </label>
      <input
        onChange={[Function]}
        type="number"
        value={0}
      />
    </div>
    <div>
      <label
        focused={false}
        form={
          Object {
            "key": Array [
              "coordinates",
              1,
            ],
            "schema": Object {
              "title": "Y",
              "type": "number",
            },
            "title": "Y",
            "type": "number",
          }
        }
        htmlFor="['coordinates']['1']"
        value={0}
      >
        Y
      </label>
      <input
        onChange={[Function]}
        type="number"
        value={0}
      />
    </div>
  </fieldset>,
]
`;

exports[`samples geopoint renders with the MaterialUI decorator 1`] = `
Array [
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "type",
        ],
        "schema": Object {
          "default": Array [
            "Point",
          ],
          "enum": Array [
            "Point",
          ],
          "type": "string",
        },
        "title": "",
        "titleMap": Array [
          Object {
            "name": "Point",
            "value": "Point",
          },
        ],
        "titles": Array [
          "Point",
        ],
        "type": "select",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink Mui-error Mui-error MuiFormLabel-filled"
      data-shrink={true}
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "default": Array [
              "Point",
            ],
            "enum": Array [
              "Point",
            ],
            "type": "string",
          },
          "title": "",
          "titleMap": Array [
            Object {
              "name": "Point",
              "value": "Point",
            },
          ],
          "titles": Array [
            "Point",
          ],
          "type": "select",
        }
      }
      value={
        Array [
          "Point",
        ]
      }
    >
      
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "default": Array [
              "Point",
            ],
            "enum": Array [
              "Point",
            ],
            "type": "string",
          },
          "title": "",
          "titleMap": Array [
            Object {
              "name": "Point",
              "value": "Point",
            },
          ],
          "titles": Array [
            "Point",
          ],
          "type": "select",
        }
      }
      onClick={[Function]}
    >
      <div
        aria-haspopup="listbox"
        className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        role="button"
        tabIndex={0}
      >
        Point
      </div>
      <input
        aria-hidden={true}
        className="MuiSelect-nativeInput"
        onAnimationStart={[Function]}
        onChange={[Function]}
        required={false}
        tabIndex={-1}
        value="Point"
      />
      <svg
        aria-hidden={true}
        className="MuiSvgIcon-root MuiSelect-icon"
        focusable="false"
        viewBox="0 0 24 24"
      >
        <path
          d="M7 10l5 5 5-5z"
        />
      </svg>
    </div>
    <p
      className="MuiFormHelperText-root Mui-error MuiFormHelperText-filled"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "default": Array [
              "Point",
            ],
            "enum": Array [
              "Point",
            ],
            "type": "string",
          },
          "title": "",
          "titleMap": Array [
            Object {
              "name": "Point",
              "value": "Point",
            },
          ],
          "titles": Array [
            "Point",
          ],
          "type": "select",
        }
      }
      value={
        Array [
          "Point",
        ]
      }
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div
    className="MuiPaper-root MuiCard-root makeStyles-root-7 MuiPaper-elevation1 MuiPaper-rounded"
  >
    <div
      className="MuiCardContent-root"
    >
      <fieldset
        className="MuiFormControl-root MuiFormControl-fullWidth"
      >
        <legend
          className="MuiFormLabel-root"
        >
          
        </legend>
        <div
          className="MuiFormControl-root MuiFormControl-fullWidth"
          form={
            Object {
              "key": Array [
                "coordinates",
                0,
              ],
              "schema": Object {
                "title": "X",
                "type": "number",
              },
              "title": "X",
              "type": "number",
            }
          }
        >
          <label
            className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
            data-shrink={true}
            form={
              Object {
                "key": Array [
                  "coordinates",
                  0,
                ],
                "schema": Object {
                  "title": "X",
                  "type": "number",
                },
                "title": "X",
                "type": "number",
              }
            }
            htmlFor="['coordinates']['0']"
            value={0}
          >
            X
          </label>
          <div
            className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
            form={
              Object {
                "key": Array [
                  "coordinates",
                  0,
                ],
                "schema": Object {
                  "title": "X",
                  "type": "number",
                },
                "title": "X",
                "type": "number",
              }
            }
            onClick={[Function]}
          >
            <input
              aria-invalid={false}
              className="MuiInputBase-input MuiInput-input"
              disabled={false}
              id="['coordinates']['0']"
              onAnimationStart={[Function]}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              type="text"
              value={0}
            />
          </div>
        </div>
        <div
          className="MuiFormControl-root MuiFormControl-fullWidth"
          form={
            Object {
              "key": Array [
                "coordinates",
                1,
              ],
              "schema": Object {
                "title": "Y",
                "type": "number",
              },
              "title": "Y",
              "type": "number",
            }
          }
        >
          <label
            className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
            data-shrink={true}
            form={
              Object {
                "key": Array [
                  "coordinates",
                  1,
                ],
                "schema": Object {
                  "title": "Y",
                  "type": "number",
                },
                "title": "Y",
                "type": "number",
              }
            }
            htmlFor="['coordinates']['1']"
            value={0}
          >
            Y
          </label>
          <div
            className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
            form={
              Object {
                "key": Array [
                  "coordinates",
                  1,
                ],
                "schema": Object {
                  "title": "Y",
                  "type": "number",
                },
                "title": "Y",
                "type": "number",
              }
            }
            onClick={[Function]}
          >
            <input
              aria-invalid={false}
              className="MuiInputBase-input MuiInput-input"
              disabled={false}
              id="['coordinates']['1']"
              onAnimationStart={[Function]}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              type="text"
              value={0}
            />
          </div>
        </div>
      </fieldset>
    </div>
  </div>,
]
`;

exports[`samples geopoint renders with the barebones decorator 1`] = `
Array [
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "default": Array [
              "Point",
            ],
            "enum": Array [
              "Point",
            ],
            "type": "string",
          },
          "title": "",
          "titleMap": Array [
            Object {
              "name": "Point",
              "value": "Point",
            },
          ],
          "titles": Array [
            "Point",
          ],
          "type": "select",
        }
      }
      value={
        Array [
          "Point",
        ]
      }
    >
      
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "default": Array [
              "Point",
            ],
            "enum": Array [
              "Point",
            ],
            "type": "string",
          },
          "title": "",
          "titleMap": Array [
            Object {
              "name": "Point",
              "value": "Point",
            },
          ],
          "titles": Array [
            "Point",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value={
        Array [
          "Point",
        ]
      }
    >
      <option
        value="Point"
      >
        Point
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "type",
          ],
          "schema": Object {
            "default": Array [
              "Point",
            ],
            "enum": Array [
              "Point",
            ],
            "type": "string",
          },
          "title": "",
          "titleMap": Array [
            Object {
              "name": "Point",
              "value": "Point",
            },
          ],
          "titles": Array [
            "Point",
          ],
          "type": "select",
        }
      }
      value={
        Array [
          "Point",
        ]
      }
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <fieldset>
    <legend>
      
    </legend>
    <div>
      <label
        focused={false}
        form={
          Object {
            "key": Array [
              "coordinates",
              0,
            ],
            "schema": Object {
              "title": "X",
              "type": "number",
            },
            "title": "X",
            "type": "number",
          }
        }
        htmlFor="['coordinates']['0']"
        value={0}
      >
        X
      </label>
      <input
        onChange={[Function]}
        type="number"
        value={0}
      />
    </div>
    <div>
      <label
        focused={false}
        form={
          Object {
            "key": Array [
              "coordinates",
              1,
            ],
            "schema": Object {
              "title": "Y",
              "type": "number",
            },
            "title": "Y",
            "type": "number",
          }
        }
        htmlFor="['coordinates']['1']"
        value={0}
      >
        Y
      </label>
      <input
        onChange={[Function]}
        type="number"
        value={0}
      />
    </div>
  </fieldset>,
]
`;

exports[`samples help renders with a defaultForSchema model 1`] = `
Array [
  <p
    form={
      Object {
        "align": "left",
        "color": "secondary",
        "description": "You can inject any text on your form.",
        "type": "help",
        "variant": "h4",
      }
    }
  >
    You can inject any text on your form.
  </p>,
  <p
    form={
      Object {
        "align": "center",
        "description": "variant h2, align center",
        "type": "help",
        "variant": "h2",
      }
    }
  >
    variant h2, align center
  </p>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "default": "Steve",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value="Steve"
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value="Steve"
    />
  </div>,
]
`;

exports[`samples help renders with the MaterialUI decorator 1`] = `
Array [
  <h4
    className="MuiTypography-root MuiTypography-h4 MuiTypography-colorSecondary MuiTypography-alignLeft"
  >
    You can inject any text on your form.
  </h4>,
  <h2
    className="MuiTypography-root MuiTypography-h2 MuiTypography-alignCenter"
  >
    variant h2, align center
  </h2>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "name",
        ],
        "schema": Object {
          "default": "Steve",
          "title": "Name",
          "type": "string",
        },
        "title": "Name",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
      data-shrink={true}
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "default": "Steve",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value="Steve"
    >
      Name
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "default": "Steve",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value="Steve"
      />
    </div>
  </div>,
]
`;

exports[`samples help renders with the barebones decorator 1`] = `
Array [
  <p
    form={
      Object {
        "align": "left",
        "color": "secondary",
        "description": "You can inject any text on your form.",
        "type": "help",
        "variant": "h4",
      }
    }
  >
    You can inject any text on your form.
  </p>,
  <p
    form={
      Object {
        "align": "center",
        "description": "variant h2, align center",
        "type": "help",
        "variant": "h2",
      }
    }
  >
    variant h2, align center
  </p>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "default": "Steve",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value="Steve"
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value="Steve"
    />
  </div>,
]
`;

exports[`samples htmlclass renders with a defaultForSchema model 1`] = `
<fieldset>
  <legend />
  <div>
    
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>
  <div
    className="red"
  >
    <label
      focused={false}
      form={
        Object {
          "htmlClass": "red",
          "key": Array [
            "bar",
          ],
          "schema": Object {
            "type": "number",
          },
          "title": "",
          "type": "number",
        }
      }
      htmlFor="['bar']"
      value={0}
    >
      bar
    </label>
    <input
      onChange={[Function]}
      type="number"
      value={0}
    />
  </div>
</fieldset>
`;

exports[`samples htmlclass renders with the MaterialUI decorator 1`] = `
<div
  className="MuiPaper-root MuiCard-root makeStyles-root-7 MuiPaper-elevation1 MuiPaper-rounded"
>
  <div
    className="MuiCardContent-root"
  >
    <fieldset
      className="MuiFormControl-root MuiFormControl-fullWidth"
    >
      <legend
        className="MuiFormLabel-root"
      />
      <div
        className="MuiFormControl-root MuiFormControl-fullWidth"
        form={
          Object {
            "key": Array [
              "foo",
            ],
            "schema": Object {
              "type": "string",
            },
            "title": "",
            "type": "text",
          }
        }
      >
        
        <div
          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
          form={
            Object {
              "key": Array [
                "foo",
              ],
              "schema": Object {
                "type": "string",
              },
              "title": "",
              "type": "text",
            }
          }
          onClick={[Function]}
        >
          <input
            aria-invalid={false}
            className="MuiInputBase-input MuiInput-input"
            disabled={false}
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            required={false}
            type="text"
            value=""
          />
        </div>
      </div>
      <div
        className="MuiFormControl-root MuiFormControl-fullWidth"
        form={
          Object {
            "htmlClass": "red",
            "key": Array [
              "bar",
            ],
            "schema": Object {
              "type": "number",
            },
            "title": "",
            "type": "number",
          }
        }
      >
        <label
          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
          data-shrink={true}
          form={
            Object {
              "htmlClass": "red",
              "key": Array [
                "bar",
              ],
              "schema": Object {
                "type": "number",
              },
              "title": "",
              "type": "number",
            }
          }
          htmlFor="['bar']"
          value={0}
        >
          bar
        </label>
        <div
          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
          form={
            Object {
              "htmlClass": "red",
              "key": Array [
                "bar",
              ],
              "schema": Object {
                "type": "number",
              },
              "title": "",
              "type": "number",
            }
          }
          onClick={[Function]}
        >
          <input
            aria-invalid={false}
            className="MuiInputBase-input MuiInput-input"
            disabled={false}
            id="['bar']"
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            required={false}
            type="text"
            value={0}
          />
        </div>
      </div>
    </fieldset>
  </div>
</div>
`;

exports[`samples htmlclass renders with the barebones decorator 1`] = `
<fieldset>
  <legend />
  <div>
    
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>
  <div
    className="red"
  >
    <label
      focused={false}
      form={
        Object {
          "htmlClass": "red",
          "key": Array [
            "bar",
          ],
          "schema": Object {
            "type": "number",
          },
          "title": "",
          "type": "number",
        }
      }
      htmlFor="['bar']"
      value={0}
    >
      bar
    </label>
    <input
      onChange={[Function]}
      type="number"
      value={0}
    />
  </div>
</fieldset>
`;

exports[`samples kitchenSink renders with a defaultForSchema model 1`] = `
<div
  className="tabs-container"
>
  <div
    className="tabs"
  >
    <button
      onClick={[Function]}
    >
      Simple Keys
    </button>
    <button
      onClick={[Function]}
    >
      Full Forms
    </button>
  </div>
  <div
    className="panels"
  >
    <div
      active={true}
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "textWithDefault",
              ],
              "schema": Object {
                "default": "Default Value",
                "title": "Text with default",
                "type": "string",
              },
              "title": "Text with default",
              "type": "text",
            },
            Object {
              "key": Array [
                "textNoDefault",
              ],
              "schema": Object {
                "title": "Text no default",
                "type": "string",
              },
              "title": "Text no default",
              "type": "text",
            },
            Object {
              "description": "General regex for email.",
              "key": Array [
                "textWithRegex",
              ],
              "schema": Object {
                "description": "General regex for email.",
                "pattern": "^\\\\S+@\\\\S+$",
                "title": "Text With Regex and Description",
                "type": "string",
              },
              "title": "Text With Regex and Description",
              "type": "text",
            },
            Object {
              "key": Array [
                "staticDropdown",
              ],
              "schema": Object {
                "enum": Array [
                  "LOCAL",
                  "SIT1",
                  "SIT2",
                  "SIT3",
                  "UAT1",
                  "UAT2",
                ],
                "title": "Static Dropdown",
                "type": "string",
              },
              "title": "Static Dropdown",
              "titleMap": Array [
                Object {
                  "name": "LOCAL",
                  "value": "LOCAL",
                },
                Object {
                  "name": "SIT1",
                  "value": "SIT1",
                },
                Object {
                  "name": "SIT2",
                  "value": "SIT2",
                },
                Object {
                  "name": "SIT3",
                  "value": "SIT3",
                },
                Object {
                  "name": "UAT1",
                  "value": "UAT1",
                },
                Object {
                  "name": "UAT2",
                  "value": "UAT2",
                },
              ],
              "titles": Array [
                "LOCAL",
                "SIT1",
                "SIT2",
                "SIT3",
                "UAT1",
                "UAT2",
              ],
              "type": "select",
            },
            Object {
              "key": Array [
                "file",
              ],
              "schema": Object {
                "title": "File Selector",
                "type": "string",
              },
              "title": "File Selector",
              "type": "file",
            },
          ],
          "title": "Simple Keys",
          "type": "fieldset",
        }
      }
    >
      <fieldset>
        <legend>
          Simple Keys
        </legend>
        <div>
          <label
            form={
              Object {
                "key": Array [
                  "textWithDefault",
                ],
                "schema": Object {
                  "default": "Default Value",
                  "title": "Text with default",
                  "type": "string",
                },
                "title": "Text with default",
                "type": "text",
              }
            }
            value="Default Value"
          >
            Text with default
          </label>
          <input
            onChange={[Function]}
            type="text"
            value="Default Value"
          />
        </div>
        <div>
          <label
            form={
              Object {
                "key": Array [
                  "textNoDefault",
                ],
                "schema": Object {
                  "title": "Text no default",
                  "type": "string",
                },
                "title": "Text no default",
                "type": "text",
              }
            }
            value=""
          >
            Text no default
          </label>
          <input
            onChange={[Function]}
            type="text"
            value=""
          />
        </div>
        <div>
          <label
            error="should match pattern \\"^\\\\S+@\\\\S+$\\""
            form={
              Object {
                "description": "General regex for email.",
                "key": Array [
                  "textWithRegex",
                ],
                "schema": Object {
                  "description": "General regex for email.",
                  "pattern": "^\\\\S+@\\\\S+$",
                  "title": "Text With Regex and Description",
                  "type": "string",
                },
                "title": "Text With Regex and Description",
                "type": "text",
              }
            }
            value=""
          >
            Text With Regex and Description
          </label>
          <input
            onChange={[Function]}
            type="text"
            value=""
          />
          <p
            error={true}
            form={
              Object {
                "description": "General regex for email.",
                "key": Array [
                  "textWithRegex",
                ],
                "schema": Object {
                  "description": "General regex for email.",
                  "pattern": "^\\\\S+@\\\\S+$",
                  "title": "Text With Regex and Description",
                  "type": "string",
                },
                "title": "Text With Regex and Description",
                "type": "text",
              }
            }
            value=""
          >
            should match pattern "^\\S+@\\S+$"
          </p>
        </div>
        <div>
          <label
            error="should be equal to one of the allowed values"
            form={
              Object {
                "key": Array [
                  "staticDropdown",
                ],
                "schema": Object {
                  "enum": Array [
                    "LOCAL",
                    "SIT1",
                    "SIT2",
                    "SIT3",
                    "UAT1",
                    "UAT2",
                  ],
                  "title": "Static Dropdown",
                  "type": "string",
                },
                "title": "Static Dropdown",
                "titleMap": Array [
                  Object {
                    "name": "LOCAL",
                    "value": "LOCAL",
                  },
                  Object {
                    "name": "SIT1",
                    "value": "SIT1",
                  },
                  Object {
                    "name": "SIT2",
                    "value": "SIT2",
                  },
                  Object {
                    "name": "SIT3",
                    "value": "SIT3",
                  },
                  Object {
                    "name": "UAT1",
                    "value": "UAT1",
                  },
                  Object {
                    "name": "UAT2",
                    "value": "UAT2",
                  },
                ],
                "titles": Array [
                  "LOCAL",
                  "SIT1",
                  "SIT2",
                  "SIT3",
                  "UAT1",
                  "UAT2",
                ],
                "type": "select",
              }
            }
            value=""
          >
            Static Dropdown
          </label>
          <select
            error="should be equal to one of the allowed values"
            form={
              Object {
                "key": Array [
                  "staticDropdown",
                ],
                "schema": Object {
                  "enum": Array [
                    "LOCAL",
                    "SIT1",
                    "SIT2",
                    "SIT3",
                    "UAT1",
                    "UAT2",
                  ],
                  "title": "Static Dropdown",
                  "type": "string",
                },
                "title": "Static Dropdown",
                "titleMap": Array [
                  Object {
                    "name": "LOCAL",
                    "value": "LOCAL",
                  },
                  Object {
                    "name": "SIT1",
                    "value": "SIT1",
                  },
                  Object {
                    "name": "SIT2",
                    "value": "SIT2",
                  },
                  Object {
                    "name": "SIT3",
                    "value": "SIT3",
                  },
                  Object {
                    "name": "UAT1",
                    "value": "UAT1",
                  },
                  Object {
                    "name": "UAT2",
                    "value": "UAT2",
                  },
                ],
                "titles": Array [
                  "LOCAL",
                  "SIT1",
                  "SIT2",
                  "SIT3",
                  "UAT1",
                  "UAT2",
                ],
                "type": "select",
              }
            }
            onChange={[Function]}
            value=""
          >
            <option
              value="LOCAL"
            >
              LOCAL
            </option>
            <option
              value="SIT1"
            >
              SIT1
            </option>
            <option
              value="SIT2"
            >
              SIT2
            </option>
            <option
              value="SIT3"
            >
              SIT3
            </option>
            <option
              value="UAT1"
            >
              UAT1
            </option>
            <option
              value="UAT2"
            >
              UAT2
            </option>
          </select>
          <p
            error={true}
            form={
              Object {
                "key": Array [
                  "staticDropdown",
                ],
                "schema": Object {
                  "enum": Array [
                    "LOCAL",
                    "SIT1",
                    "SIT2",
                    "SIT3",
                    "UAT1",
                    "UAT2",
                  ],
                  "title": "Static Dropdown",
                  "type": "string",
                },
                "title": "Static Dropdown",
                "titleMap": Array [
                  Object {
                    "name": "LOCAL",
                    "value": "LOCAL",
                  },
                  Object {
                    "name": "SIT1",
                    "value": "SIT1",
                  },
                  Object {
                    "name": "SIT2",
                    "value": "SIT2",
                  },
                  Object {
                    "name": "SIT3",
                    "value": "SIT3",
                  },
                  Object {
                    "name": "UAT1",
                    "value": "UAT1",
                  },
                  Object {
                    "name": "UAT2",
                    "value": "UAT2",
                  },
                ],
                "titles": Array [
                  "LOCAL",
                  "SIT1",
                  "SIT2",
                  "SIT3",
                  "UAT1",
                  "UAT2",
                ],
                "type": "select",
              }
            }
            value=""
          >
            should be equal to one of the allowed values
          </p>
        </div>
        <div>
          <label
            form={
              Object {
                "key": Array [
                  "file",
                ],
                "schema": Object {
                  "title": "File Selector",
                  "type": "string",
                },
                "title": "File Selector",
                "type": "file",
              }
            }
            value=""
          >
            File Selector
          </label>
          <input
            onChange={[Function]}
            type="file"
            value=""
          />
        </div>
      </fieldset>
    </div>
  </div>
</div>
`;

exports[`samples kitchenSink renders with the MaterialUI decorator 1`] = `
<div>
  <header
    className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
  >
    <div
      className="MuiTabs-root"
    >
      <div
        className="MuiTabs-scroller MuiTabs-fixed"
        onScroll={[Function]}
        style={
          Object {
            "marginBottom": null,
            "overflow": "hidden",
          }
        }
      >
        <div
          className="MuiTabs-flexContainer"
          onKeyDown={[Function]}
          role="tablist"
        >
          <button
            className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            role="tab"
            tabIndex={-1}
            type="button"
          >
            <span
              className="MuiTab-wrapper"
            >
              Simple Keys
            </span>
            <span
              className="MuiTouchRipple-root"
            />
          </button>
          <button
            className="MuiButtonBase-root MuiTab-root MuiTab-textColorInherit"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            role="tab"
            tabIndex={-1}
            type="button"
          >
            <span
              className="MuiTab-wrapper"
            >
              Full Forms
            </span>
            <span
              className="MuiTouchRipple-root"
            />
          </button>
        </div>
        <span
          className="PrivateTabIndicator-root-9 PrivateTabIndicator-colorSecondary-11 MuiTabs-indicator"
          style={
            Object {
              "left": 0,
              "width": 0,
            }
          }
        />
      </div>
    </div>
  </header>
  <div>
    <div
      active={true}
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "textWithDefault",
              ],
              "schema": Object {
                "default": "Default Value",
                "title": "Text with default",
                "type": "string",
              },
              "title": "Text with default",
              "type": "text",
            },
            Object {
              "key": Array [
                "textNoDefault",
              ],
              "schema": Object {
                "title": "Text no default",
                "type": "string",
              },
              "title": "Text no default",
              "type": "text",
            },
            Object {
              "description": "General regex for email.",
              "key": Array [
                "textWithRegex",
              ],
              "schema": Object {
                "description": "General regex for email.",
                "pattern": "^\\\\S+@\\\\S+$",
                "title": "Text With Regex and Description",
                "type": "string",
              },
              "title": "Text With Regex and Description",
              "type": "text",
            },
            Object {
              "key": Array [
                "staticDropdown",
              ],
              "schema": Object {
                "enum": Array [
                  "LOCAL",
                  "SIT1",
                  "SIT2",
                  "SIT3",
                  "UAT1",
                  "UAT2",
                ],
                "title": "Static Dropdown",
                "type": "string",
              },
              "title": "Static Dropdown",
              "titleMap": Array [
                Object {
                  "name": "LOCAL",
                  "value": "LOCAL",
                },
                Object {
                  "name": "SIT1",
                  "value": "SIT1",
                },
                Object {
                  "name": "SIT2",
                  "value": "SIT2",
                },
                Object {
                  "name": "SIT3",
                  "value": "SIT3",
                },
                Object {
                  "name": "UAT1",
                  "value": "UAT1",
                },
                Object {
                  "name": "UAT2",
                  "value": "UAT2",
                },
              ],
              "titles": Array [
                "LOCAL",
                "SIT1",
                "SIT2",
                "SIT3",
                "UAT1",
                "UAT2",
              ],
              "type": "select",
            },
            Object {
              "key": Array [
                "file",
              ],
              "schema": Object {
                "title": "File Selector",
                "type": "string",
              },
              "title": "File Selector",
              "type": "file",
            },
          ],
          "title": "Simple Keys",
          "type": "fieldset",
        }
      }
    >
      <div
        className="MuiPaper-root MuiCard-root makeStyles-root-7 MuiPaper-elevation1 MuiPaper-rounded"
      >
        <div
          className="MuiCardContent-root"
        >
          <fieldset
            className="MuiFormControl-root MuiFormControl-fullWidth"
          >
            <legend
              className="MuiFormLabel-root"
            >
              Simple Keys
            </legend>
            <div
              className="MuiFormControl-root MuiFormControl-fullWidth"
              form={
                Object {
                  "key": Array [
                    "textWithDefault",
                  ],
                  "schema": Object {
                    "default": "Default Value",
                    "title": "Text with default",
                    "type": "string",
                  },
                  "title": "Text with default",
                  "type": "text",
                }
              }
            >
              <label
                className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                data-shrink={true}
                form={
                  Object {
                    "key": Array [
                      "textWithDefault",
                    ],
                    "schema": Object {
                      "default": "Default Value",
                      "title": "Text with default",
                      "type": "string",
                    },
                    "title": "Text with default",
                    "type": "text",
                  }
                }
                value="Default Value"
              >
                Text with default
              </label>
              <div
                className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                form={
                  Object {
                    "key": Array [
                      "textWithDefault",
                    ],
                    "schema": Object {
                      "default": "Default Value",
                      "title": "Text with default",
                      "type": "string",
                    },
                    "title": "Text with default",
                    "type": "text",
                  }
                }
                onClick={[Function]}
              >
                <input
                  aria-invalid={false}
                  className="MuiInputBase-input MuiInput-input"
                  disabled={false}
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  type="text"
                  value="Default Value"
                />
              </div>
            </div>
            <div
              className="MuiFormControl-root MuiFormControl-fullWidth"
              form={
                Object {
                  "key": Array [
                    "textNoDefault",
                  ],
                  "schema": Object {
                    "title": "Text no default",
                    "type": "string",
                  },
                  "title": "Text no default",
                  "type": "text",
                }
              }
            >
              <label
                className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                data-shrink={false}
                form={
                  Object {
                    "key": Array [
                      "textNoDefault",
                    ],
                    "schema": Object {
                      "title": "Text no default",
                      "type": "string",
                    },
                    "title": "Text no default",
                    "type": "text",
                  }
                }
                value=""
              >
                Text no default
              </label>
              <div
                className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                form={
                  Object {
                    "key": Array [
                      "textNoDefault",
                    ],
                    "schema": Object {
                      "title": "Text no default",
                      "type": "string",
                    },
                    "title": "Text no default",
                    "type": "text",
                  }
                }
                onClick={[Function]}
              >
                <input
                  aria-invalid={false}
                  className="MuiInputBase-input MuiInput-input"
                  disabled={false}
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  type="text"
                  value=""
                />
              </div>
            </div>
            <div
              className="MuiFormControl-root MuiFormControl-fullWidth"
              form={
                Object {
                  "description": "General regex for email.",
                  "key": Array [
                    "textWithRegex",
                  ],
                  "schema": Object {
                    "description": "General regex for email.",
                    "pattern": "^\\\\S+@\\\\S+$",
                    "title": "Text With Regex and Description",
                    "type": "string",
                  },
                  "title": "Text With Regex and Description",
                  "type": "text",
                }
              }
            >
              <label
                className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
                data-shrink={false}
                form={
                  Object {
                    "description": "General regex for email.",
                    "key": Array [
                      "textWithRegex",
                    ],
                    "schema": Object {
                      "description": "General regex for email.",
                      "pattern": "^\\\\S+@\\\\S+$",
                      "title": "Text With Regex and Description",
                      "type": "string",
                    },
                    "title": "Text With Regex and Description",
                    "type": "text",
                  }
                }
                value=""
              >
                Text With Regex and Description
              </label>
              <div
                className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
                form={
                  Object {
                    "description": "General regex for email.",
                    "key": Array [
                      "textWithRegex",
                    ],
                    "schema": Object {
                      "description": "General regex for email.",
                      "pattern": "^\\\\S+@\\\\S+$",
                      "title": "Text With Regex and Description",
                      "type": "string",
                    },
                    "title": "Text With Regex and Description",
                    "type": "text",
                  }
                }
                onClick={[Function]}
              >
                <input
                  aria-invalid={true}
                  className="MuiInputBase-input MuiInput-input"
                  disabled={false}
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  type="text"
                  value=""
                />
              </div>
              <p
                className="MuiFormHelperText-root Mui-error"
                form={
                  Object {
                    "description": "General regex for email.",
                    "key": Array [
                      "textWithRegex",
                    ],
                    "schema": Object {
                      "description": "General regex for email.",
                      "pattern": "^\\\\S+@\\\\S+$",
                      "title": "Text With Regex and Description",
                      "type": "string",
                    },
                    "title": "Text With Regex and Description",
                    "type": "text",
                  }
                }
                value=""
              >
                should match pattern "^\\S+@\\S+$"
              </p>
            </div>
            <div
              className="MuiFormControl-root MuiFormControl-fullWidth"
              form={
                Object {
                  "key": Array [
                    "staticDropdown",
                  ],
                  "schema": Object {
                    "enum": Array [
                      "LOCAL",
                      "SIT1",
                      "SIT2",
                      "SIT3",
                      "UAT1",
                      "UAT2",
                    ],
                    "title": "Static Dropdown",
                    "type": "string",
                  },
                  "title": "Static Dropdown",
                  "titleMap": Array [
                    Object {
                      "name": "LOCAL",
                      "value": "LOCAL",
                    },
                    Object {
                      "name": "SIT1",
                      "value": "SIT1",
                    },
                    Object {
                      "name": "SIT2",
                      "value": "SIT2",
                    },
                    Object {
                      "name": "SIT3",
                      "value": "SIT3",
                    },
                    Object {
                      "name": "UAT1",
                      "value": "UAT1",
                    },
                    Object {
                      "name": "UAT2",
                      "value": "UAT2",
                    },
                  ],
                  "titles": Array [
                    "LOCAL",
                    "SIT1",
                    "SIT2",
                    "SIT3",
                    "UAT1",
                    "UAT2",
                  ],
                  "type": "select",
                }
              }
            >
              <label
                className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
                data-shrink={false}
                form={
                  Object {
                    "key": Array [
                      "staticDropdown",
                    ],
                    "schema": Object {
                      "enum": Array [
                        "LOCAL",
                        "SIT1",
                        "SIT2",
                        "SIT3",
                        "UAT1",
                        "UAT2",
                      ],
                      "title": "Static Dropdown",
                      "type": "string",
                    },
                    "title": "Static Dropdown",
                    "titleMap": Array [
                      Object {
                        "name": "LOCAL",
                        "value": "LOCAL",
                      },
                      Object {
                        "name": "SIT1",
                        "value": "SIT1",
                      },
                      Object {
                        "name": "SIT2",
                        "value": "SIT2",
                      },
                      Object {
                        "name": "SIT3",
                        "value": "SIT3",
                      },
                      Object {
                        "name": "UAT1",
                        "value": "UAT1",
                      },
                      Object {
                        "name": "UAT2",
                        "value": "UAT2",
                      },
                    ],
                    "titles": Array [
                      "LOCAL",
                      "SIT1",
                      "SIT2",
                      "SIT3",
                      "UAT1",
                      "UAT2",
                    ],
                    "type": "select",
                  }
                }
                value=""
              >
                Static Dropdown
              </label>
              <div
                className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
                form={
                  Object {
                    "key": Array [
                      "staticDropdown",
                    ],
                    "schema": Object {
                      "enum": Array [
                        "LOCAL",
                        "SIT1",
                        "SIT2",
                        "SIT3",
                        "UAT1",
                        "UAT2",
                      ],
                      "title": "Static Dropdown",
                      "type": "string",
                    },
                    "title": "Static Dropdown",
                    "titleMap": Array [
                      Object {
                        "name": "LOCAL",
                        "value": "LOCAL",
                      },
                      Object {
                        "name": "SIT1",
                        "value": "SIT1",
                      },
                      Object {
                        "name": "SIT2",
                        "value": "SIT2",
                      },
                      Object {
                        "name": "SIT3",
                        "value": "SIT3",
                      },
                      Object {
                        "name": "UAT1",
                        "value": "UAT1",
                      },
                      Object {
                        "name": "UAT2",
                        "value": "UAT2",
                      },
                    ],
                    "titles": Array [
                      "LOCAL",
                      "SIT1",
                      "SIT2",
                      "SIT3",
                      "UAT1",
                      "UAT2",
                    ],
                    "type": "select",
                  }
                }
                onClick={[Function]}
              >
                <div
                  aria-haspopup="listbox"
                  className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onMouseDown={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <span
                    dangerouslySetInnerHTML={
                      Object {
                        "__html": "&#8203;",
                      }
                    }
                  />
                </div>
                <input
                  aria-hidden={true}
                  className="MuiSelect-nativeInput"
                  onAnimationStart={[Function]}
                  onChange={[Function]}
                  required={false}
                  tabIndex={-1}
                  value=""
                />
                <svg
                  aria-hidden={true}
                  className="MuiSvgIcon-root MuiSelect-icon"
                  focusable="false"
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M7 10l5 5 5-5z"
                  />
                </svg>
              </div>
              <p
                className="MuiFormHelperText-root Mui-error"
                form={
                  Object {
                    "key": Array [
                      "staticDropdown",
                    ],
                    "schema": Object {
                      "enum": Array [
                        "LOCAL",
                        "SIT1",
                        "SIT2",
                        "SIT3",
                        "UAT1",
                        "UAT2",
                      ],
                      "title": "Static Dropdown",
                      "type": "string",
                    },
                    "title": "Static Dropdown",
                    "titleMap": Array [
                      Object {
                        "name": "LOCAL",
                        "value": "LOCAL",
                      },
                      Object {
                        "name": "SIT1",
                        "value": "SIT1",
                      },
                      Object {
                        "name": "SIT2",
                        "value": "SIT2",
                      },
                      Object {
                        "name": "SIT3",
                        "value": "SIT3",
                      },
                      Object {
                        "name": "UAT1",
                        "value": "UAT1",
                      },
                      Object {
                        "name": "UAT2",
                        "value": "UAT2",
                      },
                    ],
                    "titles": Array [
                      "LOCAL",
                      "SIT1",
                      "SIT2",
                      "SIT3",
                      "UAT1",
                      "UAT2",
                    ],
                    "type": "select",
                  }
                }
                value=""
              >
                should be equal to one of the allowed values
              </p>
            </div>
            <div
              className="MuiFormControl-root MuiFormControl-fullWidth"
              form={
                Object {
                  "key": Array [
                    "file",
                  ],
                  "schema": Object {
                    "title": "File Selector",
                    "type": "string",
                  },
                  "title": "File Selector",
                  "type": "file",
                }
              }
              value=""
            >
              <label
                className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                data-shrink={false}
                form={
                  Object {
                    "key": Array [
                      "file",
                    ],
                    "schema": Object {
                      "title": "File Selector",
                      "type": "string",
                    },
                    "title": "File Selector",
                    "type": "file",
                  }
                }
                value=""
              >
                File Selector
              </label>
              <div
                className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                onClick={[Function]}
              >
                <input
                  aria-invalid={false}
                  className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                  disabled={false}
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  type="text"
                  value=""
                />
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-text"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    <span
                      aria-hidden={true}
                      className="material-icons MuiIcon-root"
                    >
                      attach_file
                    </span>
                  </span>
                  <span
                    className="MuiTouchRipple-root"
                  />
                </button>
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-text"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    <span
                      aria-hidden={true}
                      className="material-icons MuiIcon-root"
                    >
                      clear
                    </span>
                  </span>
                  <span
                    className="MuiTouchRipple-root"
                  />
                </button>
              </div>
              <input
                className="makeStyles-fileInput-8"
                onChange={[Function]}
                type="file"
              />
            </div>
          </fieldset>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`samples kitchenSink renders with the barebones decorator 1`] = `
<div
  className="tabs-container"
>
  <div
    className="tabs"
  >
    <button
      onClick={[Function]}
    >
      Simple Keys
    </button>
    <button
      onClick={[Function]}
    >
      Full Forms
    </button>
  </div>
  <div
    className="panels"
  >
    <div
      active={true}
      form={
        Object {
          "items": Array [
            Object {
              "key": Array [
                "textWithDefault",
              ],
              "schema": Object {
                "default": "Default Value",
                "title": "Text with default",
                "type": "string",
              },
              "title": "Text with default",
              "type": "text",
            },
            Object {
              "key": Array [
                "textNoDefault",
              ],
              "schema": Object {
                "title": "Text no default",
                "type": "string",
              },
              "title": "Text no default",
              "type": "text",
            },
            Object {
              "description": "General regex for email.",
              "key": Array [
                "textWithRegex",
              ],
              "schema": Object {
                "description": "General regex for email.",
                "pattern": "^\\\\S+@\\\\S+$",
                "title": "Text With Regex and Description",
                "type": "string",
              },
              "title": "Text With Regex and Description",
              "type": "text",
            },
            Object {
              "key": Array [
                "staticDropdown",
              ],
              "schema": Object {
                "enum": Array [
                  "LOCAL",
                  "SIT1",
                  "SIT2",
                  "SIT3",
                  "UAT1",
                  "UAT2",
                ],
                "title": "Static Dropdown",
                "type": "string",
              },
              "title": "Static Dropdown",
              "titleMap": Array [
                Object {
                  "name": "LOCAL",
                  "value": "LOCAL",
                },
                Object {
                  "name": "SIT1",
                  "value": "SIT1",
                },
                Object {
                  "name": "SIT2",
                  "value": "SIT2",
                },
                Object {
                  "name": "SIT3",
                  "value": "SIT3",
                },
                Object {
                  "name": "UAT1",
                  "value": "UAT1",
                },
                Object {
                  "name": "UAT2",
                  "value": "UAT2",
                },
              ],
              "titles": Array [
                "LOCAL",
                "SIT1",
                "SIT2",
                "SIT3",
                "UAT1",
                "UAT2",
              ],
              "type": "select",
            },
            Object {
              "key": Array [
                "file",
              ],
              "schema": Object {
                "title": "File Selector",
                "type": "string",
              },
              "title": "File Selector",
              "type": "file",
            },
          ],
          "title": "Simple Keys",
          "type": "fieldset",
        }
      }
    >
      <fieldset>
        <legend>
          Simple Keys
        </legend>
        <div>
          <label
            form={
              Object {
                "key": Array [
                  "textWithDefault",
                ],
                "schema": Object {
                  "default": "Default Value",
                  "title": "Text with default",
                  "type": "string",
                },
                "title": "Text with default",
                "type": "text",
              }
            }
            value="Default Value"
          >
            Text with default
          </label>
          <input
            onChange={[Function]}
            type="text"
            value="Default Value"
          />
        </div>
        <div>
          <label
            form={
              Object {
                "key": Array [
                  "textNoDefault",
                ],
                "schema": Object {
                  "title": "Text no default",
                  "type": "string",
                },
                "title": "Text no default",
                "type": "text",
              }
            }
            value=""
          >
            Text no default
          </label>
          <input
            onChange={[Function]}
            type="text"
            value=""
          />
        </div>
        <div>
          <label
            error="should match pattern \\"^\\\\S+@\\\\S+$\\""
            form={
              Object {
                "description": "General regex for email.",
                "key": Array [
                  "textWithRegex",
                ],
                "schema": Object {
                  "description": "General regex for email.",
                  "pattern": "^\\\\S+@\\\\S+$",
                  "title": "Text With Regex and Description",
                  "type": "string",
                },
                "title": "Text With Regex and Description",
                "type": "text",
              }
            }
            value=""
          >
            Text With Regex and Description
          </label>
          <input
            onChange={[Function]}
            type="text"
            value=""
          />
          <p
            error={true}
            form={
              Object {
                "description": "General regex for email.",
                "key": Array [
                  "textWithRegex",
                ],
                "schema": Object {
                  "description": "General regex for email.",
                  "pattern": "^\\\\S+@\\\\S+$",
                  "title": "Text With Regex and Description",
                  "type": "string",
                },
                "title": "Text With Regex and Description",
                "type": "text",
              }
            }
            value=""
          >
            should match pattern "^\\S+@\\S+$"
          </p>
        </div>
        <div>
          <label
            error="should be equal to one of the allowed values"
            form={
              Object {
                "key": Array [
                  "staticDropdown",
                ],
                "schema": Object {
                  "enum": Array [
                    "LOCAL",
                    "SIT1",
                    "SIT2",
                    "SIT3",
                    "UAT1",
                    "UAT2",
                  ],
                  "title": "Static Dropdown",
                  "type": "string",
                },
                "title": "Static Dropdown",
                "titleMap": Array [
                  Object {
                    "name": "LOCAL",
                    "value": "LOCAL",
                  },
                  Object {
                    "name": "SIT1",
                    "value": "SIT1",
                  },
                  Object {
                    "name": "SIT2",
                    "value": "SIT2",
                  },
                  Object {
                    "name": "SIT3",
                    "value": "SIT3",
                  },
                  Object {
                    "name": "UAT1",
                    "value": "UAT1",
                  },
                  Object {
                    "name": "UAT2",
                    "value": "UAT2",
                  },
                ],
                "titles": Array [
                  "LOCAL",
                  "SIT1",
                  "SIT2",
                  "SIT3",
                  "UAT1",
                  "UAT2",
                ],
                "type": "select",
              }
            }
            value=""
          >
            Static Dropdown
          </label>
          <select
            error="should be equal to one of the allowed values"
            form={
              Object {
                "key": Array [
                  "staticDropdown",
                ],
                "schema": Object {
                  "enum": Array [
                    "LOCAL",
                    "SIT1",
                    "SIT2",
                    "SIT3",
                    "UAT1",
                    "UAT2",
                  ],
                  "title": "Static Dropdown",
                  "type": "string",
                },
                "title": "Static Dropdown",
                "titleMap": Array [
                  Object {
                    "name": "LOCAL",
                    "value": "LOCAL",
                  },
                  Object {
                    "name": "SIT1",
                    "value": "SIT1",
                  },
                  Object {
                    "name": "SIT2",
                    "value": "SIT2",
                  },
                  Object {
                    "name": "SIT3",
                    "value": "SIT3",
                  },
                  Object {
                    "name": "UAT1",
                    "value": "UAT1",
                  },
                  Object {
                    "name": "UAT2",
                    "value": "UAT2",
                  },
                ],
                "titles": Array [
                  "LOCAL",
                  "SIT1",
                  "SIT2",
                  "SIT3",
                  "UAT1",
                  "UAT2",
                ],
                "type": "select",
              }
            }
            onChange={[Function]}
            value=""
          >
            <option
              value="LOCAL"
            >
              LOCAL
            </option>
            <option
              value="SIT1"
            >
              SIT1
            </option>
            <option
              value="SIT2"
            >
              SIT2
            </option>
            <option
              value="SIT3"
            >
              SIT3
            </option>
            <option
              value="UAT1"
            >
              UAT1
            </option>
            <option
              value="UAT2"
            >
              UAT2
            </option>
          </select>
          <p
            error={true}
            form={
              Object {
                "key": Array [
                  "staticDropdown",
                ],
                "schema": Object {
                  "enum": Array [
                    "LOCAL",
                    "SIT1",
                    "SIT2",
                    "SIT3",
                    "UAT1",
                    "UAT2",
                  ],
                  "title": "Static Dropdown",
                  "type": "string",
                },
                "title": "Static Dropdown",
                "titleMap": Array [
                  Object {
                    "name": "LOCAL",
                    "value": "LOCAL",
                  },
                  Object {
                    "name": "SIT1",
                    "value": "SIT1",
                  },
                  Object {
                    "name": "SIT2",
                    "value": "SIT2",
                  },
                  Object {
                    "name": "SIT3",
                    "value": "SIT3",
                  },
                  Object {
                    "name": "UAT1",
                    "value": "UAT1",
                  },
                  Object {
                    "name": "UAT2",
                    "value": "UAT2",
                  },
                ],
                "titles": Array [
                  "LOCAL",
                  "SIT1",
                  "SIT2",
                  "SIT3",
                  "UAT1",
                  "UAT2",
                ],
                "type": "select",
              }
            }
            value=""
          >
            should be equal to one of the allowed values
          </p>
        </div>
        <div>
          <label
            form={
              Object {
                "key": Array [
                  "file",
                ],
                "schema": Object {
                  "title": "File Selector",
                  "type": "string",
                },
                "title": "File Selector",
                "type": "file",
              }
            }
            value=""
          >
            File Selector
          </label>
          <input
            onChange={[Function]}
            type="file"
            value=""
          />
        </div>
      </fieldset>
    </div>
  </div>
</div>
`;

exports[`samples login renders with a defaultForSchema model 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "userIdEmail",
          ],
          "schema": Object {
            "title": "UserId or Email",
            "type": "string",
          },
          "title": "UserId or Email",
          "type": "text",
        }
      }
      value=""
    >
      UserId or Email
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "password",
          ],
          "schema": Object {
            "title": "Password",
            "type": "string",
          },
          "title": "Password",
          "type": "password",
        }
      }
      value=""
    >
      Password
    </label>
    <input
      onChange={[Function]}
      type="password"
      value=""
    />
  </div>,
  <div>
    <label>
      <input
        checked={false}
        onChange={[Function]}
        type="checkbox"
      />
      Remember me
    </label>
  </div>,
]
`;

exports[`samples login renders with the MaterialUI decorator 1`] = `
Array [
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "userIdEmail",
        ],
        "schema": Object {
          "title": "UserId or Email",
          "type": "string",
        },
        "title": "UserId or Email",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "userIdEmail",
          ],
          "schema": Object {
            "title": "UserId or Email",
            "type": "string",
          },
          "title": "UserId or Email",
          "type": "text",
        }
      }
      value=""
    >
      UserId or Email
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "userIdEmail",
          ],
          "schema": Object {
            "title": "UserId or Email",
            "type": "string",
          },
          "title": "UserId or Email",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "password",
        ],
        "schema": Object {
          "title": "Password",
          "type": "string",
        },
        "title": "Password",
        "type": "password",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "password",
          ],
          "schema": Object {
            "title": "Password",
            "type": "string",
          },
          "title": "Password",
          "type": "password",
        }
      }
      value=""
    >
      Password
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "password",
          ],
          "schema": Object {
            "title": "Password",
            "type": "string",
          },
          "title": "Password",
          "type": "password",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormGroup-root MuiFormGroup-row"
  >
    <label
      className="MuiFormControlLabel-root"
    >
      <span
        aria-disabled={false}
        className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-3 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
        onBlur={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={null}
      >
        <span
          className="MuiIconButton-label"
        >
          <input
            checked={false}
            className="PrivateSwitchBase-input-6"
            data-indeterminate={false}
            onChange={[Function]}
            type="checkbox"
          />
          <svg
            aria-hidden={true}
            className="MuiSvgIcon-root"
            focusable="false"
            viewBox="0 0 24 24"
          >
            <path
              d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
            />
          </svg>
        </span>
      </span>
      <span
        className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
      >
        Remember me
      </span>
    </label>
  </div>,
]
`;

exports[`samples login renders with the barebones decorator 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "userIdEmail",
          ],
          "schema": Object {
            "title": "UserId or Email",
            "type": "string",
          },
          "title": "UserId or Email",
          "type": "text",
        }
      }
      value=""
    >
      UserId or Email
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "password",
          ],
          "schema": Object {
            "title": "Password",
            "type": "string",
          },
          "title": "Password",
          "type": "password",
        }
      }
      value=""
    >
      Password
    </label>
    <input
      onChange={[Function]}
      type="password"
      value=""
    />
  </div>,
  <div>
    <label>
      <input
        checked={false}
        onChange={[Function]}
        type="checkbox"
      />
      Remember me
    </label>
  </div>,
]
`;

exports[`samples multiselect renders with a defaultForSchema model 1`] = `
<div>
  <label
    error="should NOT have fewer than 2 items"
    form={
      Object {
        "key": Array [
          "accessLevel",
        ],
        "schema": Object {
          "items": Object {
            "enum": Array [
              "A",
              "N",
              "C",
              "R",
              "U",
              "CR",
              "CU",
              "RU",
              "CRU",
            ],
            "type": "string",
          },
          "maxItems": 3,
          "minItems": 2,
          "title": "Access Level",
          "type": "array",
          "uniqueItems": true,
        },
        "title": "Access Level",
        "titleMap": Array [
          Object {
            "name": "Authorized to anyone",
            "value": "A",
          },
          Object {
            "name": "Not Accessible",
            "value": "N",
          },
          Object {
            "name": "Client Based",
            "value": "C",
          },
          Object {
            "name": "Role Based",
            "value": "R",
          },
          Object {
            "name": "User Based",
            "value": "U",
          },
          Object {
            "name": "Client and Role Based",
            "value": "CR",
          },
          Object {
            "name": "Client and User Based",
            "value": "CU",
          },
          Object {
            "name": "Role and User Based",
            "value": "RU",
          },
          Object {
            "name": "Client, Role and User Based",
            "value": "CRU",
          },
        ],
        "titles": Array [
          "Authorized to anyone",
          "Not Accessible",
          "Client Based",
          "Role Based",
          "User Based",
          "Client and Role Based",
          "Client and User Based",
          "Role and User Based",
          "Client, Role and User Based",
        ],
        "type": "multiselect",
      }
    }
    value={Array []}
  >
    Access Level
  </label>
  <select
    error="should NOT have fewer than 2 items"
    form={
      Object {
        "key": Array [
          "accessLevel",
        ],
        "schema": Object {
          "items": Object {
            "enum": Array [
              "A",
              "N",
              "C",
              "R",
              "U",
              "CR",
              "CU",
              "RU",
              "CRU",
            ],
            "type": "string",
          },
          "maxItems": 3,
          "minItems": 2,
          "title": "Access Level",
          "type": "array",
          "uniqueItems": true,
        },
        "title": "Access Level",
        "titleMap": Array [
          Object {
            "name": "Authorized to anyone",
            "value": "A",
          },
          Object {
            "name": "Not Accessible",
            "value": "N",
          },
          Object {
            "name": "Client Based",
            "value": "C",
          },
          Object {
            "name": "Role Based",
            "value": "R",
          },
          Object {
            "name": "User Based",
            "value": "U",
          },
          Object {
            "name": "Client and Role Based",
            "value": "CR",
          },
          Object {
            "name": "Client and User Based",
            "value": "CU",
          },
          Object {
            "name": "Role and User Based",
            "value": "RU",
          },
          Object {
            "name": "Client, Role and User Based",
            "value": "CRU",
          },
        ],
        "titles": Array [
          "Authorized to anyone",
          "Not Accessible",
          "Client Based",
          "Role Based",
          "User Based",
          "Client and Role Based",
          "Client and User Based",
          "Role and User Based",
          "Client, Role and User Based",
        ],
        "type": "multiselect",
      }
    }
    multiple={true}
    onChange={[Function]}
    value={Array []}
  >
    <option
      value="A"
    >
      Authorized to anyone
    </option>
    <option
      value="N"
    >
      Not Accessible
    </option>
    <option
      value="C"
    >
      Client Based
    </option>
    <option
      value="R"
    >
      Role Based
    </option>
    <option
      value="U"
    >
      User Based
    </option>
    <option
      value="CR"
    >
      Client and Role Based
    </option>
    <option
      value="CU"
    >
      Client and User Based
    </option>
    <option
      value="RU"
    >
      Role and User Based
    </option>
    <option
      value="CRU"
    >
      Client, Role and User Based
    </option>
  </select>
  <p
    error={true}
    form={
      Object {
        "key": Array [
          "accessLevel",
        ],
        "schema": Object {
          "items": Object {
            "enum": Array [
              "A",
              "N",
              "C",
              "R",
              "U",
              "CR",
              "CU",
              "RU",
              "CRU",
            ],
            "type": "string",
          },
          "maxItems": 3,
          "minItems": 2,
          "title": "Access Level",
          "type": "array",
          "uniqueItems": true,
        },
        "title": "Access Level",
        "titleMap": Array [
          Object {
            "name": "Authorized to anyone",
            "value": "A",
          },
          Object {
            "name": "Not Accessible",
            "value": "N",
          },
          Object {
            "name": "Client Based",
            "value": "C",
          },
          Object {
            "name": "Role Based",
            "value": "R",
          },
          Object {
            "name": "User Based",
            "value": "U",
          },
          Object {
            "name": "Client and Role Based",
            "value": "CR",
          },
          Object {
            "name": "Client and User Based",
            "value": "CU",
          },
          Object {
            "name": "Role and User Based",
            "value": "RU",
          },
          Object {
            "name": "Client, Role and User Based",
            "value": "CRU",
          },
        ],
        "titles": Array [
          "Authorized to anyone",
          "Not Accessible",
          "Client Based",
          "Role Based",
          "User Based",
          "Client and Role Based",
          "Client and User Based",
          "Role and User Based",
          "Client, Role and User Based",
        ],
        "type": "multiselect",
      }
    }
    value={Array []}
  >
    should NOT have fewer than 2 items
  </p>
</div>
`;

exports[`samples multiselect renders with the MaterialUI decorator 1`] = `
<div
  className="MuiFormControl-root MuiFormControl-fullWidth"
  form={
    Object {
      "key": Array [
        "accessLevel",
      ],
      "schema": Object {
        "items": Object {
          "enum": Array [
            "A",
            "N",
            "C",
            "R",
            "U",
            "CR",
            "CU",
            "RU",
            "CRU",
          ],
          "type": "string",
        },
        "maxItems": 3,
        "minItems": 2,
        "title": "Access Level",
        "type": "array",
        "uniqueItems": true,
      },
      "title": "Access Level",
      "titleMap": Array [
        Object {
          "name": "Authorized to anyone",
          "value": "A",
        },
        Object {
          "name": "Not Accessible",
          "value": "N",
        },
        Object {
          "name": "Client Based",
          "value": "C",
        },
        Object {
          "name": "Role Based",
          "value": "R",
        },
        Object {
          "name": "User Based",
          "value": "U",
        },
        Object {
          "name": "Client and Role Based",
          "value": "CR",
        },
        Object {
          "name": "Client and User Based",
          "value": "CU",
        },
        Object {
          "name": "Role and User Based",
          "value": "RU",
        },
        Object {
          "name": "Client, Role and User Based",
          "value": "CRU",
        },
      ],
      "titles": Array [
        "Authorized to anyone",
        "Not Accessible",
        "Client Based",
        "Role Based",
        "User Based",
        "Client and Role Based",
        "Client and User Based",
        "Role and User Based",
        "Client, Role and User Based",
      ],
      "type": "multiselect",
    }
  }
>
  <label
    className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink Mui-error Mui-error"
    data-shrink={true}
    form={
      Object {
        "key": Array [
          "accessLevel",
        ],
        "schema": Object {
          "items": Object {
            "enum": Array [
              "A",
              "N",
              "C",
              "R",
              "U",
              "CR",
              "CU",
              "RU",
              "CRU",
            ],
            "type": "string",
          },
          "maxItems": 3,
          "minItems": 2,
          "title": "Access Level",
          "type": "array",
          "uniqueItems": true,
        },
        "title": "Access Level",
        "titleMap": Array [
          Object {
            "name": "Authorized to anyone",
            "value": "A",
          },
          Object {
            "name": "Not Accessible",
            "value": "N",
          },
          Object {
            "name": "Client Based",
            "value": "C",
          },
          Object {
            "name": "Role Based",
            "value": "R",
          },
          Object {
            "name": "User Based",
            "value": "U",
          },
          Object {
            "name": "Client and Role Based",
            "value": "CR",
          },
          Object {
            "name": "Client and User Based",
            "value": "CU",
          },
          Object {
            "name": "Role and User Based",
            "value": "RU",
          },
          Object {
            "name": "Client, Role and User Based",
            "value": "CRU",
          },
        ],
        "titles": Array [
          "Authorized to anyone",
          "Not Accessible",
          "Client Based",
          "Role Based",
          "User Based",
          "Client and Role Based",
          "Client and User Based",
          "Role and User Based",
          "Client, Role and User Based",
        ],
        "type": "multiselect",
      }
    }
    value={Array []}
  >
    Access Level
  </label>
  <div
    className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
    form={
      Object {
        "key": Array [
          "accessLevel",
        ],
        "schema": Object {
          "items": Object {
            "enum": Array [
              "A",
              "N",
              "C",
              "R",
              "U",
              "CR",
              "CU",
              "RU",
              "CRU",
            ],
            "type": "string",
          },
          "maxItems": 3,
          "minItems": 2,
          "title": "Access Level",
          "type": "array",
          "uniqueItems": true,
        },
        "title": "Access Level",
        "titleMap": Array [
          Object {
            "name": "Authorized to anyone",
            "value": "A",
          },
          Object {
            "name": "Not Accessible",
            "value": "N",
          },
          Object {
            "name": "Client Based",
            "value": "C",
          },
          Object {
            "name": "Role Based",
            "value": "R",
          },
          Object {
            "name": "User Based",
            "value": "U",
          },
          Object {
            "name": "Client and Role Based",
            "value": "CR",
          },
          Object {
            "name": "Client and User Based",
            "value": "CU",
          },
          Object {
            "name": "Role and User Based",
            "value": "RU",
          },
          Object {
            "name": "Client, Role and User Based",
            "value": "CRU",
          },
        ],
        "titles": Array [
          "Authorized to anyone",
          "Not Accessible",
          "Client Based",
          "Role Based",
          "User Based",
          "Client and Role Based",
          "Client and User Based",
          "Role and User Based",
          "Client, Role and User Based",
        ],
        "type": "multiselect",
      }
    }
    onClick={[Function]}
  >
    <div
      aria-haspopup="listbox"
      className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
      onBlur={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onMouseDown={[Function]}
      role="button"
      tabIndex={0}
    >
      <span
        dangerouslySetInnerHTML={
          Object {
            "__html": "&#8203;",
          }
        }
      />
    </div>
    <input
      aria-hidden={true}
      className="MuiSelect-nativeInput"
      onAnimationStart={[Function]}
      onChange={[Function]}
      required={false}
      tabIndex={-1}
      value=""
    />
    <svg
      aria-hidden={true}
      className="MuiSvgIcon-root MuiSelect-icon"
      focusable="false"
      viewBox="0 0 24 24"
    >
      <path
        d="M7 10l5 5 5-5z"
      />
    </svg>
  </div>
  <p
    className="MuiFormHelperText-root Mui-error"
    form={
      Object {
        "key": Array [
          "accessLevel",
        ],
        "schema": Object {
          "items": Object {
            "enum": Array [
              "A",
              "N",
              "C",
              "R",
              "U",
              "CR",
              "CU",
              "RU",
              "CRU",
            ],
            "type": "string",
          },
          "maxItems": 3,
          "minItems": 2,
          "title": "Access Level",
          "type": "array",
          "uniqueItems": true,
        },
        "title": "Access Level",
        "titleMap": Array [
          Object {
            "name": "Authorized to anyone",
            "value": "A",
          },
          Object {
            "name": "Not Accessible",
            "value": "N",
          },
          Object {
            "name": "Client Based",
            "value": "C",
          },
          Object {
            "name": "Role Based",
            "value": "R",
          },
          Object {
            "name": "User Based",
            "value": "U",
          },
          Object {
            "name": "Client and Role Based",
            "value": "CR",
          },
          Object {
            "name": "Client and User Based",
            "value": "CU",
          },
          Object {
            "name": "Role and User Based",
            "value": "RU",
          },
          Object {
            "name": "Client, Role and User Based",
            "value": "CRU",
          },
        ],
        "titles": Array [
          "Authorized to anyone",
          "Not Accessible",
          "Client Based",
          "Role Based",
          "User Based",
          "Client and Role Based",
          "Client and User Based",
          "Role and User Based",
          "Client, Role and User Based",
        ],
        "type": "multiselect",
      }
    }
    value={Array []}
  >
    should NOT have fewer than 2 items
  </p>
</div>
`;

exports[`samples multiselect renders with the barebones decorator 1`] = `
<div>
  <label
    error="should NOT have fewer than 2 items"
    form={
      Object {
        "key": Array [
          "accessLevel",
        ],
        "schema": Object {
          "items": Object {
            "enum": Array [
              "A",
              "N",
              "C",
              "R",
              "U",
              "CR",
              "CU",
              "RU",
              "CRU",
            ],
            "type": "string",
          },
          "maxItems": 3,
          "minItems": 2,
          "title": "Access Level",
          "type": "array",
          "uniqueItems": true,
        },
        "title": "Access Level",
        "titleMap": Array [
          Object {
            "name": "Authorized to anyone",
            "value": "A",
          },
          Object {
            "name": "Not Accessible",
            "value": "N",
          },
          Object {
            "name": "Client Based",
            "value": "C",
          },
          Object {
            "name": "Role Based",
            "value": "R",
          },
          Object {
            "name": "User Based",
            "value": "U",
          },
          Object {
            "name": "Client and Role Based",
            "value": "CR",
          },
          Object {
            "name": "Client and User Based",
            "value": "CU",
          },
          Object {
            "name": "Role and User Based",
            "value": "RU",
          },
          Object {
            "name": "Client, Role and User Based",
            "value": "CRU",
          },
        ],
        "titles": Array [
          "Authorized to anyone",
          "Not Accessible",
          "Client Based",
          "Role Based",
          "User Based",
          "Client and Role Based",
          "Client and User Based",
          "Role and User Based",
          "Client, Role and User Based",
        ],
        "type": "multiselect",
      }
    }
    value={Array []}
  >
    Access Level
  </label>
  <select
    error="should NOT have fewer than 2 items"
    form={
      Object {
        "key": Array [
          "accessLevel",
        ],
        "schema": Object {
          "items": Object {
            "enum": Array [
              "A",
              "N",
              "C",
              "R",
              "U",
              "CR",
              "CU",
              "RU",
              "CRU",
            ],
            "type": "string",
          },
          "maxItems": 3,
          "minItems": 2,
          "title": "Access Level",
          "type": "array",
          "uniqueItems": true,
        },
        "title": "Access Level",
        "titleMap": Array [
          Object {
            "name": "Authorized to anyone",
            "value": "A",
          },
          Object {
            "name": "Not Accessible",
            "value": "N",
          },
          Object {
            "name": "Client Based",
            "value": "C",
          },
          Object {
            "name": "Role Based",
            "value": "R",
          },
          Object {
            "name": "User Based",
            "value": "U",
          },
          Object {
            "name": "Client and Role Based",
            "value": "CR",
          },
          Object {
            "name": "Client and User Based",
            "value": "CU",
          },
          Object {
            "name": "Role and User Based",
            "value": "RU",
          },
          Object {
            "name": "Client, Role and User Based",
            "value": "CRU",
          },
        ],
        "titles": Array [
          "Authorized to anyone",
          "Not Accessible",
          "Client Based",
          "Role Based",
          "User Based",
          "Client and Role Based",
          "Client and User Based",
          "Role and User Based",
          "Client, Role and User Based",
        ],
        "type": "multiselect",
      }
    }
    multiple={true}
    onChange={[Function]}
    value={Array []}
  >
    <option
      value="A"
    >
      Authorized to anyone
    </option>
    <option
      value="N"
    >
      Not Accessible
    </option>
    <option
      value="C"
    >
      Client Based
    </option>
    <option
      value="R"
    >
      Role Based
    </option>
    <option
      value="U"
    >
      User Based
    </option>
    <option
      value="CR"
    >
      Client and Role Based
    </option>
    <option
      value="CU"
    >
      Client and User Based
    </option>
    <option
      value="RU"
    >
      Role and User Based
    </option>
    <option
      value="CRU"
    >
      Client, Role and User Based
    </option>
  </select>
  <p
    error={true}
    form={
      Object {
        "key": Array [
          "accessLevel",
        ],
        "schema": Object {
          "items": Object {
            "enum": Array [
              "A",
              "N",
              "C",
              "R",
              "U",
              "CR",
              "CU",
              "RU",
              "CRU",
            ],
            "type": "string",
          },
          "maxItems": 3,
          "minItems": 2,
          "title": "Access Level",
          "type": "array",
          "uniqueItems": true,
        },
        "title": "Access Level",
        "titleMap": Array [
          Object {
            "name": "Authorized to anyone",
            "value": "A",
          },
          Object {
            "name": "Not Accessible",
            "value": "N",
          },
          Object {
            "name": "Client Based",
            "value": "C",
          },
          Object {
            "name": "Role Based",
            "value": "R",
          },
          Object {
            "name": "User Based",
            "value": "U",
          },
          Object {
            "name": "Client and Role Based",
            "value": "CR",
          },
          Object {
            "name": "Client and User Based",
            "value": "CU",
          },
          Object {
            "name": "Role and User Based",
            "value": "RU",
          },
          Object {
            "name": "Client, Role and User Based",
            "value": "CRU",
          },
        ],
        "titles": Array [
          "Authorized to anyone",
          "Not Accessible",
          "Client Based",
          "Role Based",
          "User Based",
          "Client and Role Based",
          "Client and User Based",
          "Role and User Based",
          "Client, Role and User Based",
        ],
        "type": "multiselect",
      }
    }
    value={Array []}
  >
    should NOT have fewer than 2 items
  </p>
</div>
`;

exports[`samples noanswer renders with a defaultForSchema model 1`] = `null`;

exports[`samples noanswer renders with the MaterialUI decorator 1`] = `null`;

exports[`samples noanswer renders with the barebones decorator 1`] = `null`;

exports[`samples object renders with a defaultForSchema model 1`] = `
Array [
  <div>
    <label
      error="should NOT be shorter than 2 characters"
      form={
        Object {
          "description": "Gimme yea name lad",
          "key": Array [
            "name",
          ],
          "minlength": 2,
          "schema": Object {
            "description": "Gimme yea name lad",
            "minLength": 2,
            "pattern": "^[^/]*$",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "description": "Gimme yea name lad",
          "key": Array [
            "name",
          ],
          "minlength": 2,
          "schema": Object {
            "description": "Gimme yea name lad",
            "minLength": 2,
            "pattern": "^[^/]*$",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      should NOT be shorter than 2 characters
    </p>
  </div>,
  <fieldset>
    <legend>
      Attributes
    </legend>
    <div>
      <label
        form={
          Object {
            "key": Array [
              "attributes",
              "haircolor",
            ],
            "schema": Object {
              "title": "Hair color",
              "type": "string",
            },
            "title": "Hair color",
            "type": "text",
          }
        }
        value=""
      >
        Hair color
      </label>
      <input
        onChange={[Function]}
        type="text"
        value=""
      />
    </div>
    <fieldset>
      <legend>
        Shoulders
      </legend>
      <div>
        <label
          form={
            Object {
              "key": Array [
                "attributes",
                "shoulders",
                "left",
              ],
              "schema": Object {
                "title": "Left",
                "type": "string",
              },
              "title": "Left",
              "type": "text",
            }
          }
          value=""
        >
          Left
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
      <div>
        <label
          form={
            Object {
              "key": Array [
                "attributes",
                "shoulders",
                "right",
              ],
              "schema": Object {
                "title": "Right",
                "type": "string",
              },
              "title": "Right",
              "type": "text",
            }
          }
          value=""
        >
          Right
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
    </fieldset>
  </fieldset>,
]
`;

exports[`samples object renders with the MaterialUI decorator 1`] = `
Array [
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "description": "Gimme yea name lad",
        "key": Array [
          "name",
        ],
        "minlength": 2,
        "schema": Object {
          "description": "Gimme yea name lad",
          "minLength": 2,
          "pattern": "^[^/]*$",
          "title": "Name",
          "type": "string",
        },
        "title": "Name",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
      data-shrink={false}
      form={
        Object {
          "description": "Gimme yea name lad",
          "key": Array [
            "name",
          ],
          "minlength": 2,
          "schema": Object {
            "description": "Gimme yea name lad",
            "minLength": 2,
            "pattern": "^[^/]*$",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "description": "Gimme yea name lad",
          "key": Array [
            "name",
          ],
          "minlength": 2,
          "schema": Object {
            "description": "Gimme yea name lad",
            "minLength": 2,
            "pattern": "^[^/]*$",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={true}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "description": "Gimme yea name lad",
          "key": Array [
            "name",
          ],
          "minlength": 2,
          "schema": Object {
            "description": "Gimme yea name lad",
            "minLength": 2,
            "pattern": "^[^/]*$",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      should NOT be shorter than 2 characters
    </p>
  </div>,
  <div
    className="MuiPaper-root MuiCard-root makeStyles-root-7 MuiPaper-elevation1 MuiPaper-rounded"
  >
    <div
      className="MuiCardContent-root"
    >
      <fieldset
        className="MuiFormControl-root MuiFormControl-fullWidth"
      >
        <legend
          className="MuiFormLabel-root"
        >
          Attributes
        </legend>
        <div
          className="MuiFormControl-root MuiFormControl-fullWidth"
          form={
            Object {
              "key": Array [
                "attributes",
                "haircolor",
              ],
              "schema": Object {
                "title": "Hair color",
                "type": "string",
              },
              "title": "Hair color",
              "type": "text",
            }
          }
        >
          <label
            className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
            data-shrink={false}
            form={
              Object {
                "key": Array [
                  "attributes",
                  "haircolor",
                ],
                "schema": Object {
                  "title": "Hair color",
                  "type": "string",
                },
                "title": "Hair color",
                "type": "text",
              }
            }
            value=""
          >
            Hair color
          </label>
          <div
            className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
            form={
              Object {
                "key": Array [
                  "attributes",
                  "haircolor",
                ],
                "schema": Object {
                  "title": "Hair color",
                  "type": "string",
                },
                "title": "Hair color",
                "type": "text",
              }
            }
            onClick={[Function]}
          >
            <input
              aria-invalid={false}
              className="MuiInputBase-input MuiInput-input"
              disabled={false}
              onAnimationStart={[Function]}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              type="text"
              value=""
            />
          </div>
        </div>
        <div
          className="MuiPaper-root MuiCard-root makeStyles-root-7 MuiPaper-elevation1 MuiPaper-rounded"
        >
          <div
            className="MuiCardContent-root"
          >
            <fieldset
              className="MuiFormControl-root MuiFormControl-fullWidth"
            >
              <legend
                className="MuiFormLabel-root"
              >
                Shoulders
              </legend>
              <div
                className="MuiFormControl-root MuiFormControl-fullWidth"
                form={
                  Object {
                    "key": Array [
                      "attributes",
                      "shoulders",
                      "left",
                    ],
                    "schema": Object {
                      "title": "Left",
                      "type": "string",
                    },
                    "title": "Left",
                    "type": "text",
                  }
                }
              >
                <label
                  className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                  data-shrink={false}
                  form={
                    Object {
                      "key": Array [
                        "attributes",
                        "shoulders",
                        "left",
                      ],
                      "schema": Object {
                        "title": "Left",
                        "type": "string",
                      },
                      "title": "Left",
                      "type": "text",
                    }
                  }
                  value=""
                >
                  Left
                </label>
                <div
                  className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                  form={
                    Object {
                      "key": Array [
                        "attributes",
                        "shoulders",
                        "left",
                      ],
                      "schema": Object {
                        "title": "Left",
                        "type": "string",
                      },
                      "title": "Left",
                      "type": "text",
                    }
                  }
                  onClick={[Function]}
                >
                  <input
                    aria-invalid={false}
                    className="MuiInputBase-input MuiInput-input"
                    disabled={false}
                    onAnimationStart={[Function]}
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    required={false}
                    type="text"
                    value=""
                  />
                </div>
              </div>
              <div
                className="MuiFormControl-root MuiFormControl-fullWidth"
                form={
                  Object {
                    "key": Array [
                      "attributes",
                      "shoulders",
                      "right",
                    ],
                    "schema": Object {
                      "title": "Right",
                      "type": "string",
                    },
                    "title": "Right",
                    "type": "text",
                  }
                }
              >
                <label
                  className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                  data-shrink={false}
                  form={
                    Object {
                      "key": Array [
                        "attributes",
                        "shoulders",
                        "right",
                      ],
                      "schema": Object {
                        "title": "Right",
                        "type": "string",
                      },
                      "title": "Right",
                      "type": "text",
                    }
                  }
                  value=""
                >
                  Right
                </label>
                <div
                  className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                  form={
                    Object {
                      "key": Array [
                        "attributes",
                        "shoulders",
                        "right",
                      ],
                      "schema": Object {
                        "title": "Right",
                        "type": "string",
                      },
                      "title": "Right",
                      "type": "text",
                    }
                  }
                  onClick={[Function]}
                >
                  <input
                    aria-invalid={false}
                    className="MuiInputBase-input MuiInput-input"
                    disabled={false}
                    onAnimationStart={[Function]}
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    required={false}
                    type="text"
                    value=""
                  />
                </div>
              </div>
            </fieldset>
          </div>
        </div>
      </fieldset>
    </div>
  </div>,
]
`;

exports[`samples object renders with the barebones decorator 1`] = `
Array [
  <div>
    <label
      error="should NOT be shorter than 2 characters"
      form={
        Object {
          "description": "Gimme yea name lad",
          "key": Array [
            "name",
          ],
          "minlength": 2,
          "schema": Object {
            "description": "Gimme yea name lad",
            "minLength": 2,
            "pattern": "^[^/]*$",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "description": "Gimme yea name lad",
          "key": Array [
            "name",
          ],
          "minlength": 2,
          "schema": Object {
            "description": "Gimme yea name lad",
            "minLength": 2,
            "pattern": "^[^/]*$",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      should NOT be shorter than 2 characters
    </p>
  </div>,
  <fieldset>
    <legend>
      Attributes
    </legend>
    <div>
      <label
        form={
          Object {
            "key": Array [
              "attributes",
              "haircolor",
            ],
            "schema": Object {
              "title": "Hair color",
              "type": "string",
            },
            "title": "Hair color",
            "type": "text",
          }
        }
        value=""
      >
        Hair color
      </label>
      <input
        onChange={[Function]}
        type="text"
        value=""
      />
    </div>
    <fieldset>
      <legend>
        Shoulders
      </legend>
      <div>
        <label
          form={
            Object {
              "key": Array [
                "attributes",
                "shoulders",
                "left",
              ],
              "schema": Object {
                "title": "Left",
                "type": "string",
              },
              "title": "Left",
              "type": "text",
            }
          }
          value=""
        >
          Left
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
      <div>
        <label
          form={
            Object {
              "key": Array [
                "attributes",
                "shoulders",
                "right",
              ],
              "schema": Object {
                "title": "Right",
                "type": "string",
              },
              "title": "Right",
              "type": "text",
            }
          }
          value=""
        >
          Right
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
    </fieldset>
  </fieldset>,
]
`;

exports[`samples radio renders with a defaultForSchema model 1`] = `
<div>
  
  <input
    onChange={[Function]}
    type="text"
    value=""
  />
  <p
    error={true}
    form={
      Object {
        "key": Array [
          "name",
        ],
        "minlength": 3,
        "schema": Object {
          "minLength": 3,
          "type": "string",
        },
        "title": "",
        "type": "text",
      }
    }
    value=""
  >
    should NOT be shorter than 3 characters
  </p>
</div>
`;

exports[`samples radio renders with the MaterialUI decorator 1`] = `
<div
  className="MuiFormControl-root MuiFormControl-fullWidth"
  form={
    Object {
      "key": Array [
        "name",
      ],
      "minlength": 3,
      "schema": Object {
        "minLength": 3,
        "type": "string",
      },
      "title": "",
      "type": "text",
    }
  }
>
  
  <div
    className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
    form={
      Object {
        "key": Array [
          "name",
        ],
        "minlength": 3,
        "schema": Object {
          "minLength": 3,
          "type": "string",
        },
        "title": "",
        "type": "text",
      }
    }
    onClick={[Function]}
  >
    <input
      aria-invalid={true}
      className="MuiInputBase-input MuiInput-input"
      disabled={false}
      onAnimationStart={[Function]}
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      type="text"
      value=""
    />
  </div>
  <p
    className="MuiFormHelperText-root Mui-error"
    form={
      Object {
        "key": Array [
          "name",
        ],
        "minlength": 3,
        "schema": Object {
          "minLength": 3,
          "type": "string",
        },
        "title": "",
        "type": "text",
      }
    }
    value=""
  >
    should NOT be shorter than 3 characters
  </p>
</div>
`;

exports[`samples radio renders with the barebones decorator 1`] = `
<div>
  
  <input
    onChange={[Function]}
    type="text"
    value=""
  />
  <p
    error={true}
    form={
      Object {
        "key": Array [
          "name",
        ],
        "minlength": 3,
        "schema": Object {
          "minLength": 3,
          "type": "string",
        },
        "title": "",
        "type": "text",
      }
    }
    value=""
  >
    should NOT be shorter than 3 characters
  </p>
</div>
`;

exports[`samples readonly renders with a defaultForSchema model 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "password",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Password",
            "type": "string",
          },
          "title": "Password",
          "type": "password",
        }
      }
      value=""
    >
      Password
    </label>
    <input
      onChange={[Function]}
      type="password"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "text",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Text",
            "type": "string",
          },
          "title": "Text",
          "type": "text",
        }
      }
      value=""
    >
      Text
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "textarea",
          ],
          "readonly": true,
          "rows": 10,
          "schema": Object {
            "readonly": true,
            "title": "TextArea",
            "type": "string",
          },
          "title": "TextArea",
          "type": "textarea",
        }
      }
      value=""
    >
      TextArea
    </label>
    <input
      onChange={[Function]}
      type="textarea"
      value=""
    />
  </div>,
  <div>
    <label
      focused={false}
      form={
        Object {
          "key": Array [
            "number",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Number",
            "type": "number",
          },
          "title": "Number",
          "type": "number",
        }
      }
      htmlFor="['number']"
      value={0}
    >
      Number
    </label>
    <input
      onChange={[Function]}
      type="number"
      value={0}
    />
  </div>,
  <div>
    <label>
      <input
        checked={false}
        onChange={[Function]}
        type="checkbox"
      />
      Remember me
    </label>
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "readonly": true,
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "readonly": true,
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Environment
    </label>
    <select
      disabled={true}
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "readonly": true,
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "readonly": true,
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="LOCAL"
      >
        LOCAL
      </option>
      <option
        value="SIT1"
      >
        SIT1
      </option>
      <option
        value="SIT2"
      >
        SIT2
      </option>
      <option
        value="SIT3"
      >
        SIT3
      </option>
      <option
        value="UAT1"
      >
        UAT1
      </option>
      <option
        value="UAT2"
      >
        UAT2
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "readonly": true,
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "readonly": true,
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div>
    <label
      error="should match format \\"date\\""
      form={
        Object {
          "key": Array [
            "date",
          ],
          "schema": Object {
            "format": "date",
            "title": "Date",
            "type": "string",
          },
          "title": "Date",
          "type": "date",
        }
      }
      value=""
    >
      Date
    </label>
    <input
      onChange={[Function]}
      type="date"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "date",
          ],
          "schema": Object {
            "format": "date",
            "title": "Date",
            "type": "string",
          },
          "title": "Date",
          "type": "date",
        }
      }
      value=""
    >
      should match format "date"
    </p>
  </div>,
]
`;

exports[`samples readonly renders with the MaterialUI decorator 1`] = `
Array [
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "name",
        ],
        "schema": Object {
          "title": "Name",
          "type": "string",
        },
        "title": "Name",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "password",
        ],
        "readonly": true,
        "schema": Object {
          "readonly": true,
          "title": "Password",
          "type": "string",
        },
        "title": "Password",
        "type": "password",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "password",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Password",
            "type": "string",
          },
          "title": "Password",
          "type": "password",
        }
      }
      value=""
    >
      Password
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-disabled Mui-disabled MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "password",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Password",
            "type": "string",
          },
          "title": "Password",
          "type": "password",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled"
        disabled={true}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "text",
        ],
        "readonly": true,
        "schema": Object {
          "readonly": true,
          "title": "Text",
          "type": "string",
        },
        "title": "Text",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "text",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Text",
            "type": "string",
          },
          "title": "Text",
          "type": "text",
        }
      }
      value=""
    >
      Text
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-disabled Mui-disabled MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "text",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Text",
            "type": "string",
          },
          "title": "Text",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled"
        disabled={true}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "textarea",
        ],
        "readonly": true,
        "rows": 10,
        "schema": Object {
          "readonly": true,
          "title": "TextArea",
          "type": "string",
        },
        "title": "TextArea",
        "type": "textarea",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "textarea",
          ],
          "readonly": true,
          "rows": 10,
          "schema": Object {
            "readonly": true,
            "title": "TextArea",
            "type": "string",
          },
          "title": "TextArea",
          "type": "textarea",
        }
      }
      value=""
    >
      TextArea
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-disabled Mui-disabled MuiInputBase-formControl MuiInput-formControl MuiInputBase-multiline MuiInput-multiline"
      form={
        Object {
          "key": Array [
            "textarea",
          ],
          "readonly": true,
          "rows": 10,
          "schema": Object {
            "readonly": true,
            "title": "TextArea",
            "type": "string",
          },
          "title": "TextArea",
          "type": "textarea",
        }
      }
      onClick={[Function]}
    >
      <textarea
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled MuiInputBase-inputMultiline MuiInput-inputMultiline"
        disabled={true}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        rows={10}
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "number",
        ],
        "readonly": true,
        "schema": Object {
          "readonly": true,
          "title": "Number",
          "type": "number",
        },
        "title": "Number",
        "type": "number",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
      data-shrink={true}
      form={
        Object {
          "key": Array [
            "number",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Number",
            "type": "number",
          },
          "title": "Number",
          "type": "number",
        }
      }
      htmlFor="['number']"
      value={0}
    >
      Number
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-disabled Mui-disabled MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "number",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Number",
            "type": "number",
          },
          "title": "Number",
          "type": "number",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled"
        disabled={true}
        id="['number']"
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value={0}
      />
    </div>
  </div>,
  <div
    className="MuiFormGroup-root MuiFormGroup-row"
  >
    <label
      className="MuiFormControlLabel-root Mui-disabled"
    >
      <span
        aria-disabled={true}
        className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-3 MuiCheckbox-root MuiCheckbox-colorSecondary PrivateSwitchBase-disabled-5 Mui-disabled MuiIconButton-colorSecondary Mui-disabled Mui-disabled"
        onBlur={[Function]}
        onDragLeave={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onKeyUp={[Function]}
        onMouseDown={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
        tabIndex={-1}
      >
        <span
          className="MuiIconButton-label"
        >
          <input
            checked={false}
            className="PrivateSwitchBase-input-6"
            data-indeterminate={false}
            disabled={true}
            onChange={[Function]}
            type="checkbox"
          />
          <svg
            aria-hidden={true}
            className="MuiSvgIcon-root"
            focusable="false"
            viewBox="0 0 24 24"
          >
            <path
              d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
            />
          </svg>
        </span>
      </span>
      <span
        className="MuiTypography-root MuiFormControlLabel-label Mui-disabled MuiTypography-body1"
      >
        Remember me
      </span>
    </label>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "environment",
        ],
        "readonly": true,
        "schema": Object {
          "enum": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "readonly": true,
          "title": "Environment",
          "type": "string",
        },
        "title": "Environment",
        "titleMap": Array [
          Object {
            "name": "LOCAL",
            "value": "LOCAL",
          },
          Object {
            "name": "SIT1",
            "value": "SIT1",
          },
          Object {
            "name": "SIT2",
            "value": "SIT2",
          },
          Object {
            "name": "SIT3",
            "value": "SIT3",
          },
          Object {
            "name": "UAT1",
            "value": "UAT1",
          },
          Object {
            "name": "UAT2",
            "value": "UAT2",
          },
        ],
        "titles": Array [
          "LOCAL",
          "SIT1",
          "SIT2",
          "SIT3",
          "UAT1",
          "UAT2",
        ],
        "type": "select",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "readonly": true,
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "readonly": true,
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Environment
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-disabled Mui-disabled Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "readonly": true,
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "readonly": true,
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      onClick={[Function]}
    >
      <div
        aria-disabled="true"
        aria-haspopup="listbox"
        className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input Mui-disabled Mui-disabled Mui-disabled"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={null}
        role="button"
        tabIndex={null}
      >
        <span
          dangerouslySetInnerHTML={
            Object {
              "__html": "&#8203;",
            }
          }
        />
      </div>
      <input
        aria-hidden={true}
        className="MuiSelect-nativeInput"
        onAnimationStart={[Function]}
        onChange={[Function]}
        required={false}
        tabIndex={-1}
        value=""
      />
      <svg
        aria-hidden={true}
        className="MuiSvgIcon-root MuiSelect-icon Mui-disabled"
        focusable="false"
        viewBox="0 0 24 24"
      >
        <path
          d="M7 10l5 5 5-5z"
        />
      </svg>
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "readonly": true,
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "readonly": true,
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "date",
        ],
        "schema": Object {
          "format": "date",
          "title": "Date",
          "type": "string",
        },
        "title": "Date",
        "type": "date",
      }
    }
    value="1970-01-01T00:00:00Z"
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink Mui-error Mui-error"
      data-shrink={true}
      form={
        Object {
          "key": Array [
            "date",
          ],
          "schema": Object {
            "format": "date",
            "title": "Date",
            "type": "string",
          },
          "title": "Date",
          "type": "date",
        }
      }
      value="1970-01-01T00:00:00Z"
    >
      Date
    </label>
    <div
      className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
    >
      <div
        className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
        onClick={[Function]}
      >
        <input
          aria-invalid={false}
          autoFocus={false}
          className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
          disabled={false}
          onAnimationStart={[Function]}
          onBlur={[Function]}
          onChange={[Function]}
          onFocus={[Function]}
          required={false}
          type="text"
          value="1969-12-31T19:00:00-05:00"
        />
        <div
          className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
        >
          <button
            className="MuiButtonBase-root MuiIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={0}
            type="button"
          >
            <span
              className="MuiIconButton-label"
            >
              <svg
                aria-hidden={true}
                className="MuiSvgIcon-root"
                focusable="false"
                viewBox="0 0 24 24"
              >
                <path
                  d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
                />
                <path
                  d="M0 0h24v24H0z"
                  fill="none"
                />
              </svg>
            </span>
            <span
              className="MuiTouchRipple-root"
            />
          </button>
        </div>
      </div>
      
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "key": Array [
            "date",
          ],
          "schema": Object {
            "format": "date",
            "title": "Date",
            "type": "string",
          },
          "title": "Date",
          "type": "date",
        }
      }
      value="1970-01-01T00:00:00Z"
    >
      should match format "date"
    </p>
  </div>,
]
`;

exports[`samples readonly renders with the barebones decorator 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "password",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Password",
            "type": "string",
          },
          "title": "Password",
          "type": "password",
        }
      }
      value=""
    >
      Password
    </label>
    <input
      onChange={[Function]}
      type="password"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "text",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Text",
            "type": "string",
          },
          "title": "Text",
          "type": "text",
        }
      }
      value=""
    >
      Text
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      form={
        Object {
          "key": Array [
            "textarea",
          ],
          "readonly": true,
          "rows": 10,
          "schema": Object {
            "readonly": true,
            "title": "TextArea",
            "type": "string",
          },
          "title": "TextArea",
          "type": "textarea",
        }
      }
      value=""
    >
      TextArea
    </label>
    <input
      onChange={[Function]}
      type="textarea"
      value=""
    />
  </div>,
  <div>
    <label
      focused={false}
      form={
        Object {
          "key": Array [
            "number",
          ],
          "readonly": true,
          "schema": Object {
            "readonly": true,
            "title": "Number",
            "type": "number",
          },
          "title": "Number",
          "type": "number",
        }
      }
      htmlFor="['number']"
      value={0}
    >
      Number
    </label>
    <input
      onChange={[Function]}
      type="number"
      value={0}
    />
  </div>,
  <div>
    <label>
      <input
        checked={false}
        onChange={[Function]}
        type="checkbox"
      />
      Remember me
    </label>
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "readonly": true,
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "readonly": true,
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Environment
    </label>
    <select
      disabled={true}
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "readonly": true,
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "readonly": true,
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="LOCAL"
      >
        LOCAL
      </option>
      <option
        value="SIT1"
      >
        SIT1
      </option>
      <option
        value="SIT2"
      >
        SIT2
      </option>
      <option
        value="SIT3"
      >
        SIT3
      </option>
      <option
        value="UAT1"
      >
        UAT1
      </option>
      <option
        value="UAT2"
      >
        UAT2
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "readonly": true,
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "readonly": true,
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div>
    <label
      error="should match format \\"date\\""
      form={
        Object {
          "key": Array [
            "date",
          ],
          "schema": Object {
            "format": "date",
            "title": "Date",
            "type": "string",
          },
          "title": "Date",
          "type": "date",
        }
      }
      value=""
    >
      Date
    </label>
    <input
      onChange={[Function]}
      type="date"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "date",
          ],
          "schema": Object {
            "format": "date",
            "title": "Date",
            "type": "string",
          },
          "title": "Date",
          "type": "date",
        }
      }
      value=""
    >
      should match format "date"
    </p>
  </div>,
]
`;

exports[`samples selectlabel renders with a defaultForSchema model 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "region",
          ],
          "schema": Object {
            "enum": Array [
              "0000",
              "0001",
              "0002",
            ],
            "title": "Region",
            "type": "string",
          },
          "title": "Region",
          "titleMap": Array [
            Object {
              "name": "Americas",
              "value": "0000",
            },
            Object {
              "name": "Asia, Oceania",
              "value": "0001",
            },
            Object {
              "name": "Europe, Africa",
              "value": "0002",
            },
          ],
          "titles": Array [
            "0000",
            "0001",
            "0002",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Region
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "region",
          ],
          "schema": Object {
            "enum": Array [
              "0000",
              "0001",
              "0002",
            ],
            "title": "Region",
            "type": "string",
          },
          "title": "Region",
          "titleMap": Array [
            Object {
              "name": "Americas",
              "value": "0000",
            },
            Object {
              "name": "Asia, Oceania",
              "value": "0001",
            },
            Object {
              "name": "Europe, Africa",
              "value": "0002",
            },
          ],
          "titles": Array [
            "0000",
            "0001",
            "0002",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="0000"
      >
        Americas
      </option>
      <option
        value="0001"
      >
        Asia, Oceania
      </option>
      <option
        value="0002"
      >
        Europe, Africa
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "region",
          ],
          "schema": Object {
            "enum": Array [
              "0000",
              "0001",
              "0002",
            ],
            "title": "Region",
            "type": "string",
          },
          "title": "Region",
          "titleMap": Array [
            Object {
              "name": "Americas",
              "value": "0000",
            },
            Object {
              "name": "Asia, Oceania",
              "value": "0001",
            },
            Object {
              "name": "Europe, Africa",
              "value": "0002",
            },
          ],
          "titles": Array [
            "0000",
            "0001",
            "0002",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "bank",
          ],
          "schema": Object {
            "displayFn": [Function],
            "enum": Array [
              Object {
                "id": 1,
                "name": "First",
              },
              Object {
                "id": 2,
                "name": "Second",
              },
              Object {
                "id": 3,
                "name": "Third",
              },
            ],
            "isObject": true,
            "title": "Bank",
            "type": "string",
          },
          "title": "Bank",
          "titleMap": Array [
            Object {
              "name": "{\\"id\\":1,\\"name\\":\\"First\\"}",
              "value": Object {
                "id": 1,
                "name": "First",
              },
            },
            Object {
              "name": "{\\"id\\":2,\\"name\\":\\"Second\\"}",
              "value": Object {
                "id": 2,
                "name": "Second",
              },
            },
            Object {
              "name": "{\\"id\\":3,\\"name\\":\\"Third\\"}",
              "value": Object {
                "id": 3,
                "name": "Third",
              },
            },
          ],
          "titles": Array [
            "{\\"id\\":1,\\"name\\":\\"First\\"}",
            "{\\"id\\":2,\\"name\\":\\"Second\\"}",
            "{\\"id\\":3,\\"name\\":\\"Third\\"}",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Bank
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "bank",
          ],
          "schema": Object {
            "displayFn": [Function],
            "enum": Array [
              Object {
                "id": 1,
                "name": "First",
              },
              Object {
                "id": 2,
                "name": "Second",
              },
              Object {
                "id": 3,
                "name": "Third",
              },
            ],
            "isObject": true,
            "title": "Bank",
            "type": "string",
          },
          "title": "Bank",
          "titleMap": Array [
            Object {
              "name": "{\\"id\\":1,\\"name\\":\\"First\\"}",
              "value": Object {
                "id": 1,
                "name": "First",
              },
            },
            Object {
              "name": "{\\"id\\":2,\\"name\\":\\"Second\\"}",
              "value": Object {
                "id": 2,
                "name": "Second",
              },
            },
            Object {
              "name": "{\\"id\\":3,\\"name\\":\\"Third\\"}",
              "value": Object {
                "id": 3,
                "name": "Third",
              },
            },
          ],
          "titles": Array [
            "{\\"id\\":1,\\"name\\":\\"First\\"}",
            "{\\"id\\":2,\\"name\\":\\"Second\\"}",
            "{\\"id\\":3,\\"name\\":\\"Third\\"}",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value={
          Object {
            "id": 1,
            "name": "First",
          }
        }
      >
        {"id":1,"name":"First"}
      </option>
      <option
        value={
          Object {
            "id": 2,
            "name": "Second",
          }
        }
      >
        {"id":2,"name":"Second"}
      </option>
      <option
        value={
          Object {
            "id": 3,
            "name": "Third",
          }
        }
      >
        {"id":3,"name":"Third"}
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "bank",
          ],
          "schema": Object {
            "displayFn": [Function],
            "enum": Array [
              Object {
                "id": 1,
                "name": "First",
              },
              Object {
                "id": 2,
                "name": "Second",
              },
              Object {
                "id": 3,
                "name": "Third",
              },
            ],
            "isObject": true,
            "title": "Bank",
            "type": "string",
          },
          "title": "Bank",
          "titleMap": Array [
            Object {
              "name": "{\\"id\\":1,\\"name\\":\\"First\\"}",
              "value": Object {
                "id": 1,
                "name": "First",
              },
            },
            Object {
              "name": "{\\"id\\":2,\\"name\\":\\"Second\\"}",
              "value": Object {
                "id": 2,
                "name": "Second",
              },
            },
            Object {
              "name": "{\\"id\\":3,\\"name\\":\\"Third\\"}",
              "value": Object {
                "id": 3,
                "name": "Third",
              },
            },
          ],
          "titles": Array [
            "{\\"id\\":1,\\"name\\":\\"First\\"}",
            "{\\"id\\":2,\\"name\\":\\"Second\\"}",
            "{\\"id\\":3,\\"name\\":\\"Third\\"}",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
]
`;

exports[`samples selectlabel renders with the MaterialUI decorator 1`] = `
Array [
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "name",
        ],
        "schema": Object {
          "title": "Name",
          "type": "string",
        },
        "title": "Name",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "region",
        ],
        "schema": Object {
          "enum": Array [
            "0000",
            "0001",
            "0002",
          ],
          "title": "Region",
          "type": "string",
        },
        "title": "Region",
        "titleMap": Array [
          Object {
            "name": "Americas",
            "value": "0000",
          },
          Object {
            "name": "Asia, Oceania",
            "value": "0001",
          },
          Object {
            "name": "Europe, Africa",
            "value": "0002",
          },
        ],
        "titles": Array [
          "0000",
          "0001",
          "0002",
        ],
        "type": "select",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "region",
          ],
          "schema": Object {
            "enum": Array [
              "0000",
              "0001",
              "0002",
            ],
            "title": "Region",
            "type": "string",
          },
          "title": "Region",
          "titleMap": Array [
            Object {
              "name": "Americas",
              "value": "0000",
            },
            Object {
              "name": "Asia, Oceania",
              "value": "0001",
            },
            Object {
              "name": "Europe, Africa",
              "value": "0002",
            },
          ],
          "titles": Array [
            "0000",
            "0001",
            "0002",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Region
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "region",
          ],
          "schema": Object {
            "enum": Array [
              "0000",
              "0001",
              "0002",
            ],
            "title": "Region",
            "type": "string",
          },
          "title": "Region",
          "titleMap": Array [
            Object {
              "name": "Americas",
              "value": "0000",
            },
            Object {
              "name": "Asia, Oceania",
              "value": "0001",
            },
            Object {
              "name": "Europe, Africa",
              "value": "0002",
            },
          ],
          "titles": Array [
            "0000",
            "0001",
            "0002",
          ],
          "type": "select",
        }
      }
      onClick={[Function]}
    >
      <div
        aria-haspopup="listbox"
        className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        role="button"
        tabIndex={0}
      >
        <span
          dangerouslySetInnerHTML={
            Object {
              "__html": "&#8203;",
            }
          }
        />
      </div>
      <input
        aria-hidden={true}
        className="MuiSelect-nativeInput"
        onAnimationStart={[Function]}
        onChange={[Function]}
        required={false}
        tabIndex={-1}
        value=""
      />
      <svg
        aria-hidden={true}
        className="MuiSvgIcon-root MuiSelect-icon"
        focusable="false"
        viewBox="0 0 24 24"
      >
        <path
          d="M7 10l5 5 5-5z"
        />
      </svg>
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "key": Array [
            "region",
          ],
          "schema": Object {
            "enum": Array [
              "0000",
              "0001",
              "0002",
            ],
            "title": "Region",
            "type": "string",
          },
          "title": "Region",
          "titleMap": Array [
            Object {
              "name": "Americas",
              "value": "0000",
            },
            Object {
              "name": "Asia, Oceania",
              "value": "0001",
            },
            Object {
              "name": "Europe, Africa",
              "value": "0002",
            },
          ],
          "titles": Array [
            "0000",
            "0001",
            "0002",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "bank",
        ],
        "schema": Object {
          "displayFn": [Function],
          "enum": Array [
            Object {
              "id": 1,
              "name": "First",
            },
            Object {
              "id": 2,
              "name": "Second",
            },
            Object {
              "id": 3,
              "name": "Third",
            },
          ],
          "isObject": true,
          "title": "Bank",
          "type": "string",
        },
        "title": "Bank",
        "titleMap": Array [
          Object {
            "name": "{\\"id\\":1,\\"name\\":\\"First\\"}",
            "value": Object {
              "id": 1,
              "name": "First",
            },
          },
          Object {
            "name": "{\\"id\\":2,\\"name\\":\\"Second\\"}",
            "value": Object {
              "id": 2,
              "name": "Second",
            },
          },
          Object {
            "name": "{\\"id\\":3,\\"name\\":\\"Third\\"}",
            "value": Object {
              "id": 3,
              "name": "Third",
            },
          },
        ],
        "titles": Array [
          "{\\"id\\":1,\\"name\\":\\"First\\"}",
          "{\\"id\\":2,\\"name\\":\\"Second\\"}",
          "{\\"id\\":3,\\"name\\":\\"Third\\"}",
        ],
        "type": "select",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "bank",
          ],
          "schema": Object {
            "displayFn": [Function],
            "enum": Array [
              Object {
                "id": 1,
                "name": "First",
              },
              Object {
                "id": 2,
                "name": "Second",
              },
              Object {
                "id": 3,
                "name": "Third",
              },
            ],
            "isObject": true,
            "title": "Bank",
            "type": "string",
          },
          "title": "Bank",
          "titleMap": Array [
            Object {
              "name": "{\\"id\\":1,\\"name\\":\\"First\\"}",
              "value": Object {
                "id": 1,
                "name": "First",
              },
            },
            Object {
              "name": "{\\"id\\":2,\\"name\\":\\"Second\\"}",
              "value": Object {
                "id": 2,
                "name": "Second",
              },
            },
            Object {
              "name": "{\\"id\\":3,\\"name\\":\\"Third\\"}",
              "value": Object {
                "id": 3,
                "name": "Third",
              },
            },
          ],
          "titles": Array [
            "{\\"id\\":1,\\"name\\":\\"First\\"}",
            "{\\"id\\":2,\\"name\\":\\"Second\\"}",
            "{\\"id\\":3,\\"name\\":\\"Third\\"}",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Bank
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "bank",
          ],
          "schema": Object {
            "displayFn": [Function],
            "enum": Array [
              Object {
                "id": 1,
                "name": "First",
              },
              Object {
                "id": 2,
                "name": "Second",
              },
              Object {
                "id": 3,
                "name": "Third",
              },
            ],
            "isObject": true,
            "title": "Bank",
            "type": "string",
          },
          "title": "Bank",
          "titleMap": Array [
            Object {
              "name": "{\\"id\\":1,\\"name\\":\\"First\\"}",
              "value": Object {
                "id": 1,
                "name": "First",
              },
            },
            Object {
              "name": "{\\"id\\":2,\\"name\\":\\"Second\\"}",
              "value": Object {
                "id": 2,
                "name": "Second",
              },
            },
            Object {
              "name": "{\\"id\\":3,\\"name\\":\\"Third\\"}",
              "value": Object {
                "id": 3,
                "name": "Third",
              },
            },
          ],
          "titles": Array [
            "{\\"id\\":1,\\"name\\":\\"First\\"}",
            "{\\"id\\":2,\\"name\\":\\"Second\\"}",
            "{\\"id\\":3,\\"name\\":\\"Third\\"}",
          ],
          "type": "select",
        }
      }
      onClick={[Function]}
    >
      <div
        aria-haspopup="listbox"
        className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        role="button"
        tabIndex={0}
      >
        <span
          dangerouslySetInnerHTML={
            Object {
              "__html": "&#8203;",
            }
          }
        />
      </div>
      <input
        aria-hidden={true}
        className="MuiSelect-nativeInput"
        onAnimationStart={[Function]}
        onChange={[Function]}
        required={false}
        tabIndex={-1}
        value=""
      />
      <svg
        aria-hidden={true}
        className="MuiSvgIcon-root MuiSelect-icon"
        focusable="false"
        viewBox="0 0 24 24"
      >
        <path
          d="M7 10l5 5 5-5z"
        />
      </svg>
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "key": Array [
            "bank",
          ],
          "schema": Object {
            "displayFn": [Function],
            "enum": Array [
              Object {
                "id": 1,
                "name": "First",
              },
              Object {
                "id": 2,
                "name": "Second",
              },
              Object {
                "id": 3,
                "name": "Third",
              },
            ],
            "isObject": true,
            "title": "Bank",
            "type": "string",
          },
          "title": "Bank",
          "titleMap": Array [
            Object {
              "name": "{\\"id\\":1,\\"name\\":\\"First\\"}",
              "value": Object {
                "id": 1,
                "name": "First",
              },
            },
            Object {
              "name": "{\\"id\\":2,\\"name\\":\\"Second\\"}",
              "value": Object {
                "id": 2,
                "name": "Second",
              },
            },
            Object {
              "name": "{\\"id\\":3,\\"name\\":\\"Third\\"}",
              "value": Object {
                "id": 3,
                "name": "Third",
              },
            },
          ],
          "titles": Array [
            "{\\"id\\":1,\\"name\\":\\"First\\"}",
            "{\\"id\\":2,\\"name\\":\\"Second\\"}",
            "{\\"id\\":3,\\"name\\":\\"Third\\"}",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
]
`;

exports[`samples selectlabel renders with the barebones decorator 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value=""
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "region",
          ],
          "schema": Object {
            "enum": Array [
              "0000",
              "0001",
              "0002",
            ],
            "title": "Region",
            "type": "string",
          },
          "title": "Region",
          "titleMap": Array [
            Object {
              "name": "Americas",
              "value": "0000",
            },
            Object {
              "name": "Asia, Oceania",
              "value": "0001",
            },
            Object {
              "name": "Europe, Africa",
              "value": "0002",
            },
          ],
          "titles": Array [
            "0000",
            "0001",
            "0002",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Region
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "region",
          ],
          "schema": Object {
            "enum": Array [
              "0000",
              "0001",
              "0002",
            ],
            "title": "Region",
            "type": "string",
          },
          "title": "Region",
          "titleMap": Array [
            Object {
              "name": "Americas",
              "value": "0000",
            },
            Object {
              "name": "Asia, Oceania",
              "value": "0001",
            },
            Object {
              "name": "Europe, Africa",
              "value": "0002",
            },
          ],
          "titles": Array [
            "0000",
            "0001",
            "0002",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="0000"
      >
        Americas
      </option>
      <option
        value="0001"
      >
        Asia, Oceania
      </option>
      <option
        value="0002"
      >
        Europe, Africa
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "region",
          ],
          "schema": Object {
            "enum": Array [
              "0000",
              "0001",
              "0002",
            ],
            "title": "Region",
            "type": "string",
          },
          "title": "Region",
          "titleMap": Array [
            Object {
              "name": "Americas",
              "value": "0000",
            },
            Object {
              "name": "Asia, Oceania",
              "value": "0001",
            },
            Object {
              "name": "Europe, Africa",
              "value": "0002",
            },
          ],
          "titles": Array [
            "0000",
            "0001",
            "0002",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "bank",
          ],
          "schema": Object {
            "displayFn": [Function],
            "enum": Array [
              Object {
                "id": 1,
                "name": "First",
              },
              Object {
                "id": 2,
                "name": "Second",
              },
              Object {
                "id": 3,
                "name": "Third",
              },
            ],
            "isObject": true,
            "title": "Bank",
            "type": "string",
          },
          "title": "Bank",
          "titleMap": Array [
            Object {
              "name": "{\\"id\\":1,\\"name\\":\\"First\\"}",
              "value": Object {
                "id": 1,
                "name": "First",
              },
            },
            Object {
              "name": "{\\"id\\":2,\\"name\\":\\"Second\\"}",
              "value": Object {
                "id": 2,
                "name": "Second",
              },
            },
            Object {
              "name": "{\\"id\\":3,\\"name\\":\\"Third\\"}",
              "value": Object {
                "id": 3,
                "name": "Third",
              },
            },
          ],
          "titles": Array [
            "{\\"id\\":1,\\"name\\":\\"First\\"}",
            "{\\"id\\":2,\\"name\\":\\"Second\\"}",
            "{\\"id\\":3,\\"name\\":\\"Third\\"}",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Bank
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "bank",
          ],
          "schema": Object {
            "displayFn": [Function],
            "enum": Array [
              Object {
                "id": 1,
                "name": "First",
              },
              Object {
                "id": 2,
                "name": "Second",
              },
              Object {
                "id": 3,
                "name": "Third",
              },
            ],
            "isObject": true,
            "title": "Bank",
            "type": "string",
          },
          "title": "Bank",
          "titleMap": Array [
            Object {
              "name": "{\\"id\\":1,\\"name\\":\\"First\\"}",
              "value": Object {
                "id": 1,
                "name": "First",
              },
            },
            Object {
              "name": "{\\"id\\":2,\\"name\\":\\"Second\\"}",
              "value": Object {
                "id": 2,
                "name": "Second",
              },
            },
            Object {
              "name": "{\\"id\\":3,\\"name\\":\\"Third\\"}",
              "value": Object {
                "id": 3,
                "name": "Third",
              },
            },
          ],
          "titles": Array [
            "{\\"id\\":1,\\"name\\":\\"First\\"}",
            "{\\"id\\":2,\\"name\\":\\"Second\\"}",
            "{\\"id\\":3,\\"name\\":\\"Third\\"}",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value={
          Object {
            "id": 1,
            "name": "First",
          }
        }
      >
        {"id":1,"name":"First"}
      </option>
      <option
        value={
          Object {
            "id": 2,
            "name": "Second",
          }
        }
      >
        {"id":2,"name":"Second"}
      </option>
      <option
        value={
          Object {
            "id": 3,
            "name": "Third",
          }
        }
      >
        {"id":3,"name":"Third"}
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "bank",
          ],
          "schema": Object {
            "displayFn": [Function],
            "enum": Array [
              Object {
                "id": 1,
                "name": "First",
              },
              Object {
                "id": 2,
                "name": "Second",
              },
              Object {
                "id": 3,
                "name": "Third",
              },
            ],
            "isObject": true,
            "title": "Bank",
            "type": "string",
          },
          "title": "Bank",
          "titleMap": Array [
            Object {
              "name": "{\\"id\\":1,\\"name\\":\\"First\\"}",
              "value": Object {
                "id": 1,
                "name": "First",
              },
            },
            Object {
              "name": "{\\"id\\":2,\\"name\\":\\"Second\\"}",
              "value": Object {
                "id": 2,
                "name": "Second",
              },
            },
            Object {
              "name": "{\\"id\\":3,\\"name\\":\\"Third\\"}",
              "value": Object {
                "id": 3,
                "name": "Third",
              },
            },
          ],
          "titles": Array [
            "{\\"id\\":1,\\"name\\":\\"First\\"}",
            "{\\"id\\":2,\\"name\\":\\"Second\\"}",
            "{\\"id\\":3,\\"name\\":\\"Third\\"}",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
]
`;

exports[`samples simple renders with a defaultForSchema model 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "default": "Steve",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value="Steve"
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value="Steve"
    />
  </div>,
  <div>
    <label
      error="should match pattern \\"^\\\\S+@\\\\S+$\\""
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
            "validationMessage": "Email must be of proper format: example@example",
          },
          "title": "Email",
          "type": "text",
          "validationMessage": "Email must be of proper format: example@example",
        }
      }
      value=""
    >
      Email
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
            "validationMessage": "Email must be of proper format: example@example",
          },
          "title": "Email",
          "type": "text",
          "validationMessage": "Email must be of proper format: example@example",
        }
      }
      value=""
    >
      should match pattern "^\\S+@\\S+$"
    </p>
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Environment
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="LOCAL"
      >
        LOCAL
      </option>
      <option
        value="SIT1"
      >
        SIT1
      </option>
      <option
        value="SIT2"
      >
        SIT2
      </option>
      <option
        value="SIT3"
      >
        SIT3
      </option>
      <option
        value="UAT1"
      >
        UAT1
      </option>
      <option
        value="UAT2"
      >
        UAT2
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div>
    <label
      form={
        Object {
          "description": "Please write your comment here.",
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "placeholder": "Make a comment",
          "rows": 20,
          "schema": Object {
            "description": "Please write your comment here.",
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy! 20 Characters max please :)",
          },
          "title": "Comment",
          "type": "textarea",
          "validationMessage": "Don't be greedy! 20 Characters max please :)",
        }
      }
      value=""
    >
      Comment
    </label>
    <input
      onChange={[Function]}
      type="textarea"
      value=""
    />
    <p
      error={false}
      form={
        Object {
          "description": "Please write your comment here.",
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "placeholder": "Make a comment",
          "rows": 20,
          "schema": Object {
            "description": "Please write your comment here.",
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy! 20 Characters max please :)",
          },
          "title": "Comment",
          "type": "textarea",
          "validationMessage": "Don't be greedy! 20 Characters max please :)",
        }
      }
      value=""
    >
      Please write your comment here.
    </p>
  </div>,
]
`;

exports[`samples simple renders with the MaterialUI decorator 1`] = `
Array [
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "name",
        ],
        "schema": Object {
          "default": "Steve",
          "title": "Name",
          "type": "string",
        },
        "title": "Name",
        "type": "text",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
      data-shrink={true}
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "default": "Steve",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value="Steve"
    >
      Name
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "default": "Steve",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value="Steve"
      />
    </div>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "description": "Email will be used for evil.",
        "key": Array [
          "email",
        ],
        "schema": Object {
          "description": "Email will be used for evil.",
          "pattern": "^\\\\S+@\\\\S+$",
          "title": "Email",
          "type": "string",
          "validationMessage": "Email must be of proper format: example@example",
        },
        "title": "Email",
        "type": "text",
        "validationMessage": "Email must be of proper format: example@example",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
      data-shrink={false}
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
            "validationMessage": "Email must be of proper format: example@example",
          },
          "title": "Email",
          "type": "text",
          "validationMessage": "Email must be of proper format: example@example",
        }
      }
      value=""
    >
      Email
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
            "validationMessage": "Email must be of proper format: example@example",
          },
          "title": "Email",
          "type": "text",
          "validationMessage": "Email must be of proper format: example@example",
        }
      }
      onClick={[Function]}
    >
      <input
        aria-invalid={true}
        className="MuiInputBase-input MuiInput-input"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        required={false}
        type="text"
        value=""
      />
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
            "validationMessage": "Email must be of proper format: example@example",
          },
          "title": "Email",
          "type": "text",
          "validationMessage": "Email must be of proper format: example@example",
        }
      }
      value=""
    >
      should match pattern "^\\S+@\\S+$"
    </p>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "key": Array [
          "environment",
        ],
        "schema": Object {
          "enum": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "title": "Environment",
          "type": "string",
        },
        "title": "Environment",
        "titleMap": Array [
          Object {
            "name": "LOCAL",
            "value": "LOCAL",
          },
          Object {
            "name": "SIT1",
            "value": "SIT1",
          },
          Object {
            "name": "SIT2",
            "value": "SIT2",
          },
          Object {
            "name": "SIT3",
            "value": "SIT3",
          },
          Object {
            "name": "UAT1",
            "value": "UAT1",
          },
          Object {
            "name": "UAT2",
            "value": "UAT2",
          },
        ],
        "titles": Array [
          "LOCAL",
          "SIT1",
          "SIT2",
          "SIT3",
          "UAT1",
          "UAT2",
        ],
        "type": "select",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
      data-shrink={false}
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Environment
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      onClick={[Function]}
    >
      <div
        aria-haspopup="listbox"
        className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
        onBlur={[Function]}
        onFocus={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        role="button"
        tabIndex={0}
      >
        <span
          dangerouslySetInnerHTML={
            Object {
              "__html": "&#8203;",
            }
          }
        />
      </div>
      <input
        aria-hidden={true}
        className="MuiSelect-nativeInput"
        onAnimationStart={[Function]}
        onChange={[Function]}
        required={false}
        tabIndex={-1}
        value=""
      />
      <svg
        aria-hidden={true}
        className="MuiSvgIcon-root MuiSelect-icon"
        focusable="false"
        viewBox="0 0 24 24"
      >
        <path
          d="M7 10l5 5 5-5z"
        />
      </svg>
    </div>
    <p
      className="MuiFormHelperText-root Mui-error"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
    form={
      Object {
        "description": "Please write your comment here.",
        "key": Array [
          "comment",
        ],
        "maxlength": 20,
        "placeholder": "Make a comment",
        "rows": 20,
        "schema": Object {
          "description": "Please write your comment here.",
          "maxLength": 20,
          "title": "Comment",
          "type": "string",
          "validationMessage": "Don't be greedy! 20 Characters max please :)",
        },
        "title": "Comment",
        "type": "textarea",
        "validationMessage": "Don't be greedy! 20 Characters max please :)",
      }
    }
  >
    <label
      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
      data-shrink={false}
      form={
        Object {
          "description": "Please write your comment here.",
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "placeholder": "Make a comment",
          "rows": 20,
          "schema": Object {
            "description": "Please write your comment here.",
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy! 20 Characters max please :)",
          },
          "title": "Comment",
          "type": "textarea",
          "validationMessage": "Don't be greedy! 20 Characters max please :)",
        }
      }
      value=""
    >
      Comment
    </label>
    <div
      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-multiline MuiInput-multiline"
      form={
        Object {
          "description": "Please write your comment here.",
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "placeholder": "Make a comment",
          "rows": 20,
          "schema": Object {
            "description": "Please write your comment here.",
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy! 20 Characters max please :)",
          },
          "title": "Comment",
          "type": "textarea",
          "validationMessage": "Don't be greedy! 20 Characters max please :)",
        }
      }
      onClick={[Function]}
    >
      <textarea
        aria-invalid={false}
        className="MuiInputBase-input MuiInput-input MuiInputBase-inputMultiline MuiInput-inputMultiline"
        disabled={false}
        onAnimationStart={[Function]}
        onBlur={[Function]}
        onChange={[Function]}
        onFocus={[Function]}
        placeholder="Make a comment"
        required={false}
        rows={20}
        value=""
      />
    </div>
    <p
      className="MuiFormHelperText-root"
      form={
        Object {
          "description": "Please write your comment here.",
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "placeholder": "Make a comment",
          "rows": 20,
          "schema": Object {
            "description": "Please write your comment here.",
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy! 20 Characters max please :)",
          },
          "title": "Comment",
          "type": "textarea",
          "validationMessage": "Don't be greedy! 20 Characters max please :)",
        }
      }
      value=""
    >
      Please write your comment here.
    </p>
  </div>,
]
`;

exports[`samples simple renders with the barebones decorator 1`] = `
Array [
  <div>
    <label
      form={
        Object {
          "key": Array [
            "name",
          ],
          "schema": Object {
            "default": "Steve",
            "title": "Name",
            "type": "string",
          },
          "title": "Name",
          "type": "text",
        }
      }
      value="Steve"
    >
      Name
    </label>
    <input
      onChange={[Function]}
      type="text"
      value="Steve"
    />
  </div>,
  <div>
    <label
      error="should match pattern \\"^\\\\S+@\\\\S+$\\""
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
            "validationMessage": "Email must be of proper format: example@example",
          },
          "title": "Email",
          "type": "text",
          "validationMessage": "Email must be of proper format: example@example",
        }
      }
      value=""
    >
      Email
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "description": "Email will be used for evil.",
          "key": Array [
            "email",
          ],
          "schema": Object {
            "description": "Email will be used for evil.",
            "pattern": "^\\\\S+@\\\\S+$",
            "title": "Email",
            "type": "string",
            "validationMessage": "Email must be of proper format: example@example",
          },
          "title": "Email",
          "type": "text",
          "validationMessage": "Email must be of proper format: example@example",
        }
      }
      value=""
    >
      should match pattern "^\\S+@\\S+$"
    </p>
  </div>,
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Environment
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="LOCAL"
      >
        LOCAL
      </option>
      <option
        value="SIT1"
      >
        SIT1
      </option>
      <option
        value="SIT2"
      >
        SIT2
      </option>
      <option
        value="SIT3"
      >
        SIT3
      </option>
      <option
        value="UAT1"
      >
        UAT1
      </option>
      <option
        value="UAT2"
      >
        UAT2
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "environment",
          ],
          "schema": Object {
            "enum": Array [
              "LOCAL",
              "SIT1",
              "SIT2",
              "SIT3",
              "UAT1",
              "UAT2",
            ],
            "title": "Environment",
            "type": "string",
          },
          "title": "Environment",
          "titleMap": Array [
            Object {
              "name": "LOCAL",
              "value": "LOCAL",
            },
            Object {
              "name": "SIT1",
              "value": "SIT1",
            },
            Object {
              "name": "SIT2",
              "value": "SIT2",
            },
            Object {
              "name": "SIT3",
              "value": "SIT3",
            },
            Object {
              "name": "UAT1",
              "value": "UAT1",
            },
            Object {
              "name": "UAT2",
              "value": "UAT2",
            },
          ],
          "titles": Array [
            "LOCAL",
            "SIT1",
            "SIT2",
            "SIT3",
            "UAT1",
            "UAT2",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>,
  <div>
    <label
      form={
        Object {
          "description": "Please write your comment here.",
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "placeholder": "Make a comment",
          "rows": 20,
          "schema": Object {
            "description": "Please write your comment here.",
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy! 20 Characters max please :)",
          },
          "title": "Comment",
          "type": "textarea",
          "validationMessage": "Don't be greedy! 20 Characters max please :)",
        }
      }
      value=""
    >
      Comment
    </label>
    <input
      onChange={[Function]}
      type="textarea"
      value=""
    />
    <p
      error={false}
      form={
        Object {
          "description": "Please write your comment here.",
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "placeholder": "Make a comment",
          "rows": 20,
          "schema": Object {
            "description": "Please write your comment here.",
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy! 20 Characters max please :)",
          },
          "title": "Comment",
          "type": "textarea",
          "validationMessage": "Don't be greedy! 20 Characters max please :)",
        }
      }
      value=""
    >
      Please write your comment here.
    </p>
  </div>,
]
`;

exports[`samples simplearray renders with a defaultForSchema model 1`] = `
<div>
  <button
    onClick={[Function]}
  >
    add
  </button>
  <ul />
</div>
`;

exports[`samples simplearray renders with the MaterialUI decorator 1`] = `
<div
  className="MuiPaper-root MuiCard-root makeStyles-root-1 MuiPaper-elevation1 MuiPaper-rounded"
>
  <div
    className="MuiFormControl-root MuiFormControl-fullWidth"
  >
    <header
      className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
    >
      <div
        className="MuiToolbar-root MuiToolbar-dense MuiToolbar-gutters"
      >
        <h6
          className="MuiTypography-root makeStyles-title-2 MuiTypography-h6"
        >
          Comments
        </h6>
        <button
          className="MuiButtonBase-root MuiIconButton-root"
          disabled={false}
          onBlur={[Function]}
          onClick={[Function]}
          onDragLeave={[Function]}
          onFocus={[Function]}
          onKeyDown={[Function]}
          onKeyUp={[Function]}
          onMouseDown={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          onTouchEnd={[Function]}
          onTouchMove={[Function]}
          onTouchStart={[Function]}
          tabIndex={0}
          type="button"
        >
          <span
            className="MuiIconButton-label"
          >
            <span
              aria-hidden={true}
              className="material-icons MuiIcon-root"
            >
              add
            </span>
          </span>
        </button>
      </div>
    </header>
    <ul
      className="MuiList-root MuiList-padding"
    />
  </div>
</div>
`;

exports[`samples simplearray renders with the barebones decorator 1`] = `
<div>
  <button
    onClick={[Function]}
  >
    add
  </button>
  <ul />
</div>
`;

exports[`samples simplestring renders with a defaultForSchema model 1`] = `
<div>
  <label
    form={
      Object {
        "key": Array [],
        "schema": Object {
          "title": "String Value",
          "type": "string",
        },
        "title": "String Value",
        "type": "text",
      }
    }
    value=""
  >
    String Value
  </label>
  <input
    onChange={[Function]}
    type="text"
    value=""
  />
</div>
`;

exports[`samples simplestring renders with the MaterialUI decorator 1`] = `
<div
  className="MuiFormControl-root MuiFormControl-fullWidth"
  form={
    Object {
      "key": Array [],
      "schema": Object {
        "title": "String Value",
        "type": "string",
      },
      "title": "String Value",
      "type": "text",
    }
  }
>
  <label
    className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
    data-shrink={false}
    form={
      Object {
        "key": Array [],
        "schema": Object {
          "title": "String Value",
          "type": "string",
        },
        "title": "String Value",
        "type": "text",
      }
    }
    value=""
  >
    String Value
  </label>
  <div
    className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
    form={
      Object {
        "key": Array [],
        "schema": Object {
          "title": "String Value",
          "type": "string",
        },
        "title": "String Value",
        "type": "text",
      }
    }
    onClick={[Function]}
  >
    <input
      aria-invalid={false}
      className="MuiInputBase-input MuiInput-input"
      disabled={false}
      onAnimationStart={[Function]}
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      type="text"
      value=""
    />
  </div>
</div>
`;

exports[`samples simplestring renders with the barebones decorator 1`] = `
<div>
  <label
    form={
      Object {
        "key": Array [],
        "schema": Object {
          "title": "String Value",
          "type": "string",
        },
        "title": "String Value",
        "type": "text",
      }
    }
    value=""
  >
    String Value
  </label>
  <input
    onChange={[Function]}
    type="text"
    value=""
  />
</div>
`;

exports[`samples tuple renders with a defaultForSchema model 1`] = `
<fieldset>
  <legend>
    Tuples
  </legend>
  <fieldset>
    <legend>
      User Tuple
    </legend>
    <div>
      <label
        focused={false}
        form={
          Object {
            "key": Array [
              "foo",
              0,
            ],
            "schema": Object {
              "title": "ID",
              "type": "number",
            },
            "title": "ID",
            "type": "number",
          }
        }
        htmlFor="['foo']['0']"
        value={0}
      >
        ID
      </label>
      <input
        onChange={[Function]}
        type="number"
        value={0}
      />
    </div>
    <div>
      <label
        form={
          Object {
            "key": Array [
              "foo",
              1,
            ],
            "schema": Object {
              "title": "Name",
              "type": "string",
            },
            "title": "Name",
            "type": "text",
          }
        }
        value=""
      >
        Name
      </label>
      <input
        onChange={[Function]}
        type="text"
        value=""
      />
    </div>
    <div>
      <button
        onClick={[Function]}
      >
        add
      </button>
      <ul />
    </div>
  </fieldset>
</fieldset>
`;

exports[`samples tuple renders with the MaterialUI decorator 1`] = `
<div
  className="MuiPaper-root MuiCard-root makeStyles-root-7 MuiPaper-elevation1 MuiPaper-rounded"
>
  <div
    className="MuiCardContent-root"
  >
    <fieldset
      className="MuiFormControl-root MuiFormControl-fullWidth"
    >
      <legend
        className="MuiFormLabel-root"
      >
        Tuples
      </legend>
      <div
        className="MuiPaper-root MuiCard-root makeStyles-root-7 MuiPaper-elevation1 MuiPaper-rounded"
      >
        <div
          className="MuiCardContent-root"
        >
          <fieldset
            className="MuiFormControl-root MuiFormControl-fullWidth"
          >
            <legend
              className="MuiFormLabel-root"
            >
              User Tuple
            </legend>
            <div
              className="MuiFormControl-root MuiFormControl-fullWidth"
              form={
                Object {
                  "key": Array [
                    "foo",
                    0,
                  ],
                  "schema": Object {
                    "title": "ID",
                    "type": "number",
                  },
                  "title": "ID",
                  "type": "number",
                }
              }
            >
              <label
                className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
                data-shrink={true}
                form={
                  Object {
                    "key": Array [
                      "foo",
                      0,
                    ],
                    "schema": Object {
                      "title": "ID",
                      "type": "number",
                    },
                    "title": "ID",
                    "type": "number",
                  }
                }
                htmlFor="['foo']['0']"
                value={0}
              >
                ID
              </label>
              <div
                className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                form={
                  Object {
                    "key": Array [
                      "foo",
                      0,
                    ],
                    "schema": Object {
                      "title": "ID",
                      "type": "number",
                    },
                    "title": "ID",
                    "type": "number",
                  }
                }
                onClick={[Function]}
              >
                <input
                  aria-invalid={false}
                  className="MuiInputBase-input MuiInput-input"
                  disabled={false}
                  id="['foo']['0']"
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  type="text"
                  value={0}
                />
              </div>
            </div>
            <div
              className="MuiFormControl-root MuiFormControl-fullWidth"
              form={
                Object {
                  "key": Array [
                    "foo",
                    1,
                  ],
                  "schema": Object {
                    "title": "Name",
                    "type": "string",
                  },
                  "title": "Name",
                  "type": "text",
                }
              }
            >
              <label
                className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                data-shrink={false}
                form={
                  Object {
                    "key": Array [
                      "foo",
                      1,
                    ],
                    "schema": Object {
                      "title": "Name",
                      "type": "string",
                    },
                    "title": "Name",
                    "type": "text",
                  }
                }
                value=""
              >
                Name
              </label>
              <div
                className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                form={
                  Object {
                    "key": Array [
                      "foo",
                      1,
                    ],
                    "schema": Object {
                      "title": "Name",
                      "type": "string",
                    },
                    "title": "Name",
                    "type": "text",
                  }
                }
                onClick={[Function]}
              >
                <input
                  aria-invalid={false}
                  className="MuiInputBase-input MuiInput-input"
                  disabled={false}
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  required={false}
                  type="text"
                  value=""
                />
              </div>
            </div>
            <div
              className="MuiPaper-root MuiCard-root makeStyles-root-1 MuiPaper-elevation1 MuiPaper-rounded"
            >
              <div
                className="MuiFormControl-root MuiFormControl-fullWidth"
              >
                <header
                  className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
                >
                  <div
                    className="MuiToolbar-root MuiToolbar-dense MuiToolbar-gutters"
                  >
                    <h6
                      className="MuiTypography-root makeStyles-title-2 MuiTypography-h6"
                    >
                      Addresses
                    </h6>
                    <button
                      className="MuiButtonBase-root MuiIconButton-root"
                      disabled={false}
                      onBlur={[Function]}
                      onClick={[Function]}
                      onDragLeave={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      tabIndex={0}
                      type="button"
                    >
                      <span
                        className="MuiIconButton-label"
                      >
                        <span
                          aria-hidden={true}
                          className="material-icons MuiIcon-root"
                        >
                          add
                        </span>
                      </span>
                      <span
                        className="MuiTouchRipple-root"
                      />
                    </button>
                  </div>
                </header>
                <ul
                  className="MuiList-root MuiList-padding"
                />
              </div>
            </div>
          </fieldset>
        </div>
      </div>
    </fieldset>
  </div>
</div>
`;

exports[`samples tuple renders with the barebones decorator 1`] = `
<fieldset>
  <legend>
    Tuples
  </legend>
  <fieldset>
    <legend>
      User Tuple
    </legend>
    <div>
      <label
        focused={false}
        form={
          Object {
            "key": Array [
              "foo",
              0,
            ],
            "schema": Object {
              "title": "ID",
              "type": "number",
            },
            "title": "ID",
            "type": "number",
          }
        }
        htmlFor="['foo']['0']"
        value={0}
      >
        ID
      </label>
      <input
        onChange={[Function]}
        type="number"
        value={0}
      />
    </div>
    <div>
      <label
        form={
          Object {
            "key": Array [
              "foo",
              1,
            ],
            "schema": Object {
              "title": "Name",
              "type": "string",
            },
            "title": "Name",
            "type": "text",
          }
        }
        value=""
      >
        Name
      </label>
      <input
        onChange={[Function]}
        type="text"
        value=""
      />
    </div>
    <div>
      <button
        onClick={[Function]}
      >
        add
      </button>
      <ul />
    </div>
  </fieldset>
</fieldset>
`;

exports[`samples tuple-advanced renders with a defaultForSchema model 1`] = `
Array [
  <fieldset>
    <legend>
      Nested
    </legend>
    <fieldset>
      <legend />
      <div>
        <label
          form={
            Object {
              "key": Array [
                "nested",
                "0",
                "1",
              ],
              "schema": Object {
                "title": "Last Name",
                "type": "string",
              },
              "title": "Last Name",
              "type": "text",
            }
          }
          value=""
        >
          Last Name
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
      <div>
        <label
          form={
            Object {
              "key": Array [
                "nested",
                "0",
                "0",
              ],
              "schema": Object {
                "title": "First Name",
                "type": "string",
              },
              "title": "First Name",
              "type": "text",
            }
          }
          value=""
        >
          First Name
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
    </fieldset>
    <fieldset>
      <legend />
      <div>
        <label
          form={
            Object {
              "key": Array [
                "nested",
                "1",
                "0",
              ],
              "schema": Object {
                "title": "Street Address",
                "type": "string",
              },
              "title": "Street Address",
              "type": "text",
            }
          }
          value=""
        >
          Street Address
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
      <div>
        <label
          form={
            Object {
              "key": Array [
                "nested",
                "1",
                "1",
              ],
              "schema": Object {
                "title": "City/State",
                "type": "string",
              },
              "title": "City/State",
              "type": "text",
            }
          }
          value=""
        >
          City/State
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
    </fieldset>
  </fieldset>,
  <div>
    <button
      onClick={[Function]}
    >
      add
    </button>
    <ul />
  </div>,
]
`;

exports[`samples tuple-advanced renders with the MaterialUI decorator 1`] = `
Array [
  <div
    className="MuiPaper-root MuiCard-root makeStyles-root-7 MuiPaper-elevation1 MuiPaper-rounded"
  >
    <div
      className="MuiCardContent-root"
    >
      <fieldset
        className="MuiFormControl-root MuiFormControl-fullWidth"
      >
        <legend
          className="MuiFormLabel-root"
        >
          Nested
        </legend>
        <div
          className="MuiPaper-root MuiCard-root makeStyles-root-7 MuiPaper-elevation1 MuiPaper-rounded"
        >
          <div
            className="MuiCardContent-root"
          >
            <fieldset
              className="MuiFormControl-root MuiFormControl-fullWidth"
            >
              <legend
                className="MuiFormLabel-root"
              />
              <div
                className="MuiFormControl-root MuiFormControl-fullWidth"
                form={
                  Object {
                    "key": Array [
                      "nested",
                      "0",
                      "1",
                    ],
                    "schema": Object {
                      "title": "Last Name",
                      "type": "string",
                    },
                    "title": "Last Name",
                    "type": "text",
                  }
                }
              >
                <label
                  className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                  data-shrink={false}
                  form={
                    Object {
                      "key": Array [
                        "nested",
                        "0",
                        "1",
                      ],
                      "schema": Object {
                        "title": "Last Name",
                        "type": "string",
                      },
                      "title": "Last Name",
                      "type": "text",
                    }
                  }
                  value=""
                >
                  Last Name
                </label>
                <div
                  className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                  form={
                    Object {
                      "key": Array [
                        "nested",
                        "0",
                        "1",
                      ],
                      "schema": Object {
                        "title": "Last Name",
                        "type": "string",
                      },
                      "title": "Last Name",
                      "type": "text",
                    }
                  }
                  onClick={[Function]}
                >
                  <input
                    aria-invalid={false}
                    className="MuiInputBase-input MuiInput-input"
                    disabled={false}
                    onAnimationStart={[Function]}
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    required={false}
                    type="text"
                    value=""
                  />
                </div>
              </div>
              <div
                className="MuiFormControl-root MuiFormControl-fullWidth"
                form={
                  Object {
                    "key": Array [
                      "nested",
                      "0",
                      "0",
                    ],
                    "schema": Object {
                      "title": "First Name",
                      "type": "string",
                    },
                    "title": "First Name",
                    "type": "text",
                  }
                }
              >
                <label
                  className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                  data-shrink={false}
                  form={
                    Object {
                      "key": Array [
                        "nested",
                        "0",
                        "0",
                      ],
                      "schema": Object {
                        "title": "First Name",
                        "type": "string",
                      },
                      "title": "First Name",
                      "type": "text",
                    }
                  }
                  value=""
                >
                  First Name
                </label>
                <div
                  className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                  form={
                    Object {
                      "key": Array [
                        "nested",
                        "0",
                        "0",
                      ],
                      "schema": Object {
                        "title": "First Name",
                        "type": "string",
                      },
                      "title": "First Name",
                      "type": "text",
                    }
                  }
                  onClick={[Function]}
                >
                  <input
                    aria-invalid={false}
                    className="MuiInputBase-input MuiInput-input"
                    disabled={false}
                    onAnimationStart={[Function]}
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    required={false}
                    type="text"
                    value=""
                  />
                </div>
              </div>
            </fieldset>
          </div>
        </div>
        <div
          className="MuiPaper-root MuiCard-root makeStyles-root-7 MuiPaper-elevation1 MuiPaper-rounded"
        >
          <div
            className="MuiCardContent-root"
          >
            <fieldset
              className="MuiFormControl-root MuiFormControl-fullWidth"
            >
              <legend
                className="MuiFormLabel-root"
              />
              <div
                className="MuiFormControl-root MuiFormControl-fullWidth"
                form={
                  Object {
                    "key": Array [
                      "nested",
                      "1",
                      "0",
                    ],
                    "schema": Object {
                      "title": "Street Address",
                      "type": "string",
                    },
                    "title": "Street Address",
                    "type": "text",
                  }
                }
              >
                <label
                  className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                  data-shrink={false}
                  form={
                    Object {
                      "key": Array [
                        "nested",
                        "1",
                        "0",
                      ],
                      "schema": Object {
                        "title": "Street Address",
                        "type": "string",
                      },
                      "title": "Street Address",
                      "type": "text",
                    }
                  }
                  value=""
                >
                  Street Address
                </label>
                <div
                  className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                  form={
                    Object {
                      "key": Array [
                        "nested",
                        "1",
                        "0",
                      ],
                      "schema": Object {
                        "title": "Street Address",
                        "type": "string",
                      },
                      "title": "Street Address",
                      "type": "text",
                    }
                  }
                  onClick={[Function]}
                >
                  <input
                    aria-invalid={false}
                    className="MuiInputBase-input MuiInput-input"
                    disabled={false}
                    onAnimationStart={[Function]}
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    required={false}
                    type="text"
                    value=""
                  />
                </div>
              </div>
              <div
                className="MuiFormControl-root MuiFormControl-fullWidth"
                form={
                  Object {
                    "key": Array [
                      "nested",
                      "1",
                      "1",
                    ],
                    "schema": Object {
                      "title": "City/State",
                      "type": "string",
                    },
                    "title": "City/State",
                    "type": "text",
                  }
                }
              >
                <label
                  className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                  data-shrink={false}
                  form={
                    Object {
                      "key": Array [
                        "nested",
                        "1",
                        "1",
                      ],
                      "schema": Object {
                        "title": "City/State",
                        "type": "string",
                      },
                      "title": "City/State",
                      "type": "text",
                    }
                  }
                  value=""
                >
                  City/State
                </label>
                <div
                  className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                  form={
                    Object {
                      "key": Array [
                        "nested",
                        "1",
                        "1",
                      ],
                      "schema": Object {
                        "title": "City/State",
                        "type": "string",
                      },
                      "title": "City/State",
                      "type": "text",
                    }
                  }
                  onClick={[Function]}
                >
                  <input
                    aria-invalid={false}
                    className="MuiInputBase-input MuiInput-input"
                    disabled={false}
                    onAnimationStart={[Function]}
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    required={false}
                    type="text"
                    value=""
                  />
                </div>
              </div>
            </fieldset>
          </div>
        </div>
      </fieldset>
    </div>
  </div>,
  <div
    className="MuiPaper-root MuiCard-root makeStyles-root-1 MuiPaper-elevation1 MuiPaper-rounded"
  >
    <div
      className="MuiFormControl-root MuiFormControl-fullWidth"
    >
      <header
        className="MuiPaper-root MuiAppBar-root MuiAppBar-positionStatic MuiAppBar-colorPrimary MuiPaper-elevation4"
      >
        <div
          className="MuiToolbar-root MuiToolbar-dense MuiToolbar-gutters"
        >
          <h6
            className="MuiTypography-root makeStyles-title-2 MuiTypography-h6"
          >
            Array
          </h6>
          <button
            className="MuiButtonBase-root MuiIconButton-root"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={0}
            type="button"
          >
            <span
              className="MuiIconButton-label"
            >
              <span
                aria-hidden={true}
                className="material-icons MuiIcon-root"
              >
                add
              </span>
            </span>
          </button>
        </div>
      </header>
      <ul
        className="MuiList-root MuiList-padding"
      />
    </div>
  </div>,
]
`;

exports[`samples tuple-advanced renders with the barebones decorator 1`] = `
Array [
  <fieldset>
    <legend>
      Nested
    </legend>
    <fieldset>
      <legend />
      <div>
        <label
          form={
            Object {
              "key": Array [
                "nested",
                "0",
                "1",
              ],
              "schema": Object {
                "title": "Last Name",
                "type": "string",
              },
              "title": "Last Name",
              "type": "text",
            }
          }
          value=""
        >
          Last Name
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
      <div>
        <label
          form={
            Object {
              "key": Array [
                "nested",
                "0",
                "0",
              ],
              "schema": Object {
                "title": "First Name",
                "type": "string",
              },
              "title": "First Name",
              "type": "text",
            }
          }
          value=""
        >
          First Name
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
    </fieldset>
    <fieldset>
      <legend />
      <div>
        <label
          form={
            Object {
              "key": Array [
                "nested",
                "1",
                "0",
              ],
              "schema": Object {
                "title": "Street Address",
                "type": "string",
              },
              "title": "Street Address",
              "type": "text",
            }
          }
          value=""
        >
          Street Address
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
      <div>
        <label
          form={
            Object {
              "key": Array [
                "nested",
                "1",
                "1",
              ],
              "schema": Object {
                "title": "City/State",
                "type": "string",
              },
              "title": "City/State",
              "type": "text",
            }
          }
          value=""
        >
          City/State
        </label>
        <input
          onChange={[Function]}
          type="text"
          value=""
        />
      </div>
    </fieldset>
  </fieldset>,
  <div>
    <button
      onClick={[Function]}
    >
      add
    </button>
    <ul />
  </div>,
]
`;

exports[`samples types renders with a defaultForSchema model 1`] = `
<fieldset>
  <legend>
    Types
  </legend>
  <div>
    
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "string",
          ],
          "minlength": 3,
          "schema": Object {
            "minLength": 3,
            "type": "string",
          },
          "title": "",
          "type": "text",
        }
      }
      value=""
    >
      should NOT be shorter than 3 characters
    </p>
  </div>
  <div>
    
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "anotherstring",
          ],
          "minlength": 3,
          "schema": Object {
            "minLength": 3,
            "type": "string",
          },
          "title": "",
          "type": "text",
        }
      }
      value=""
    >
      should NOT be shorter than 3 characters
    </p>
  </div>
  <div>
    <label
      form={
        Object {
          "key": Array [
            "integer",
          ],
          "schema": Object {
            "type": "integer",
          },
          "title": "",
          "type": "integer",
        }
      }
      value={0}
    >
      integer
    </label>
    <input
      onChange={[Function]}
      type="integer"
      value={0}
    />
  </div>
  <div>
    <label
      focused={false}
      form={
        Object {
          "key": Array [
            "number",
          ],
          "schema": Object {
            "type": "number",
          },
          "title": "",
          "type": "number",
        }
      }
      htmlFor="['number']"
      value={0}
    >
      number
    </label>
    <input
      onChange={[Function]}
      type="number"
      value={0}
    />
  </div>
  <div>
    <label>
      <input
        checked={false}
        onChange={[Function]}
        type="checkbox"
      />
      
    </label>
  </div>
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "radios",
          ],
          "schema": Object {
            "enum": Array [
              "a",
              "b",
              "c",
            ],
            "title": "Basic radio button example",
            "type": "string",
          },
          "title": "Basic radio button example",
          "titleMap": Array [
            Object {
              "name": "a",
              "value": "a",
            },
            Object {
              "name": "b",
              "value": "b",
            },
            Object {
              "name": "c",
              "value": "c",
            },
          ],
          "titles": Array [
            "a",
            "b",
            "c",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Basic radio button example
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "radios",
          ],
          "schema": Object {
            "enum": Array [
              "a",
              "b",
              "c",
            ],
            "title": "Basic radio button example",
            "type": "string",
          },
          "title": "Basic radio button example",
          "titleMap": Array [
            Object {
              "name": "a",
              "value": "a",
            },
            Object {
              "name": "b",
              "value": "b",
            },
            Object {
              "name": "c",
              "value": "c",
            },
          ],
          "titles": Array [
            "a",
            "b",
            "c",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="a"
      >
        a
      </option>
      <option
        value="b"
      >
        b
      </option>
      <option
        value="c"
      >
        c
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "radios",
          ],
          "schema": Object {
            "enum": Array [
              "a",
              "b",
              "c",
            ],
            "title": "Basic radio button example",
            "type": "string",
          },
          "title": "Basic radio button example",
          "titleMap": Array [
            Object {
              "name": "a",
              "value": "a",
            },
            Object {
              "name": "b",
              "value": "b",
            },
            Object {
              "name": "c",
              "value": "c",
            },
          ],
          "titles": Array [
            "a",
            "b",
            "c",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>
  <div>
    <label
      form={
        Object {
          "description": "Please write your comment here.",
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "schema": Object {
            "description": "Please write your comment here.",
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy!",
          },
          "title": "Comment",
          "type": "text",
          "validationMessage": "Don't be greedy!",
        }
      }
      value=""
    >
      Comment
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={false}
      form={
        Object {
          "description": "Please write your comment here.",
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "schema": Object {
            "description": "Please write your comment here.",
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy!",
          },
          "title": "Comment",
          "type": "text",
          "validationMessage": "Don't be greedy!",
        }
      }
      value=""
    >
      Please write your comment here.
    </p>
  </div>
</fieldset>
`;

exports[`samples types renders with the MaterialUI decorator 1`] = `
<div
  className="MuiPaper-root MuiCard-root makeStyles-root-7 MuiPaper-elevation1 MuiPaper-rounded"
>
  <div
    className="MuiCardContent-root"
  >
    <fieldset
      className="MuiFormControl-root MuiFormControl-fullWidth"
    >
      <legend
        className="MuiFormLabel-root"
      >
        Types
      </legend>
      <div
        className="MuiFormControl-root MuiFormControl-fullWidth"
        form={
          Object {
            "key": Array [
              "string",
            ],
            "minlength": 3,
            "schema": Object {
              "minLength": 3,
              "type": "string",
            },
            "title": "",
            "type": "text",
          }
        }
      >
        
        <div
          className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
          form={
            Object {
              "key": Array [
                "string",
              ],
              "minlength": 3,
              "schema": Object {
                "minLength": 3,
                "type": "string",
              },
              "title": "",
              "type": "text",
            }
          }
          onClick={[Function]}
        >
          <input
            aria-invalid={true}
            className="MuiInputBase-input MuiInput-input"
            disabled={false}
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            required={false}
            type="text"
            value=""
          />
        </div>
        <p
          className="MuiFormHelperText-root Mui-error"
          form={
            Object {
              "key": Array [
                "string",
              ],
              "minlength": 3,
              "schema": Object {
                "minLength": 3,
                "type": "string",
              },
              "title": "",
              "type": "text",
            }
          }
          value=""
        >
          should NOT be shorter than 3 characters
        </p>
      </div>
      <div
        className="MuiFormControl-root MuiFormControl-fullWidth"
        form={
          Object {
            "key": Array [
              "anotherstring",
            ],
            "minlength": 3,
            "schema": Object {
              "minLength": 3,
              "type": "string",
            },
            "title": "",
            "type": "text",
          }
        }
      >
        
        <div
          className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
          form={
            Object {
              "key": Array [
                "anotherstring",
              ],
              "minlength": 3,
              "schema": Object {
                "minLength": 3,
                "type": "string",
              },
              "title": "",
              "type": "text",
            }
          }
          onClick={[Function]}
        >
          <input
            aria-invalid={true}
            className="MuiInputBase-input MuiInput-input"
            disabled={false}
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            required={false}
            type="text"
            value=""
          />
        </div>
        <p
          className="MuiFormHelperText-root Mui-error"
          form={
            Object {
              "key": Array [
                "anotherstring",
              ],
              "minlength": 3,
              "schema": Object {
                "minLength": 3,
                "type": "string",
              },
              "title": "",
              "type": "text",
            }
          }
          value=""
        >
          should NOT be shorter than 3 characters
        </p>
      </div>
      <div
        className="MuiFormControl-root MuiFormControl-fullWidth"
        form={
          Object {
            "key": Array [
              "integer",
            ],
            "schema": Object {
              "type": "integer",
            },
            "title": "",
            "type": "integer",
          }
        }
      >
        <label
          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
          data-shrink={true}
          form={
            Object {
              "key": Array [
                "integer",
              ],
              "schema": Object {
                "type": "integer",
              },
              "title": "",
              "type": "integer",
            }
          }
          value={0}
        >
          integer
        </label>
        <div
          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
          form={
            Object {
              "key": Array [
                "integer",
              ],
              "schema": Object {
                "type": "integer",
              },
              "title": "",
              "type": "integer",
            }
          }
          onClick={[Function]}
        >
          <input
            aria-invalid={false}
            className="MuiInputBase-input MuiInput-input"
            disabled={false}
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            required={false}
            type="text"
            value={0}
          />
        </div>
      </div>
      <div
        className="MuiFormControl-root MuiFormControl-fullWidth"
        form={
          Object {
            "key": Array [
              "number",
            ],
            "schema": Object {
              "type": "number",
            },
            "title": "",
            "type": "number",
          }
        }
      >
        <label
          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-shrink"
          data-shrink={true}
          form={
            Object {
              "key": Array [
                "number",
              ],
              "schema": Object {
                "type": "number",
              },
              "title": "",
              "type": "number",
            }
          }
          htmlFor="['number']"
          value={0}
        >
          number
        </label>
        <div
          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
          form={
            Object {
              "key": Array [
                "number",
              ],
              "schema": Object {
                "type": "number",
              },
              "title": "",
              "type": "number",
            }
          }
          onClick={[Function]}
        >
          <input
            aria-invalid={false}
            className="MuiInputBase-input MuiInput-input"
            disabled={false}
            id="['number']"
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            required={false}
            type="text"
            value={0}
          />
        </div>
      </div>
      <div
        className="MuiFormGroup-root MuiFormGroup-row"
      >
        <label
          className="MuiFormControlLabel-root"
        >
          <span
            aria-disabled={false}
            className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-3 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
            onBlur={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={null}
          >
            <span
              className="MuiIconButton-label"
            >
              <input
                checked={false}
                className="PrivateSwitchBase-input-6"
                data-indeterminate={false}
                disabled={false}
                onChange={[Function]}
                type="checkbox"
              />
              <svg
                aria-hidden={true}
                className="MuiSvgIcon-root"
                focusable="false"
                viewBox="0 0 24 24"
              >
                <path
                  d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                />
              </svg>
            </span>
            <span
              className="MuiTouchRipple-root"
            />
          </span>
          <span
            className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
          >
            
          </span>
        </label>
      </div>
      <div
        className="MuiFormControl-root MuiFormControl-fullWidth"
        form={
          Object {
            "key": Array [
              "radios",
            ],
            "schema": Object {
              "enum": Array [
                "a",
                "b",
                "c",
              ],
              "title": "Basic radio button example",
              "type": "string",
            },
            "title": "Basic radio button example",
            "titleMap": Array [
              Object {
                "name": "a",
                "value": "a",
              },
              Object {
                "name": "b",
                "value": "b",
              },
              Object {
                "name": "c",
                "value": "c",
              },
            ],
            "titles": Array [
              "a",
              "b",
              "c",
            ],
            "type": "select",
          }
        }
      >
        <label
          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-error Mui-error"
          data-shrink={false}
          form={
            Object {
              "key": Array [
                "radios",
              ],
              "schema": Object {
                "enum": Array [
                  "a",
                  "b",
                  "c",
                ],
                "title": "Basic radio button example",
                "type": "string",
              },
              "title": "Basic radio button example",
              "titleMap": Array [
                Object {
                  "name": "a",
                  "value": "a",
                },
                Object {
                  "name": "b",
                  "value": "b",
                },
                Object {
                  "name": "c",
                  "value": "c",
                },
              ],
              "titles": Array [
                "a",
                "b",
                "c",
              ],
              "type": "select",
            }
          }
          value=""
        >
          Basic radio button example
        </label>
        <div
          className="MuiInputBase-root MuiInput-root MuiInput-underline Mui-error Mui-error MuiInputBase-formControl MuiInput-formControl"
          form={
            Object {
              "key": Array [
                "radios",
              ],
              "schema": Object {
                "enum": Array [
                  "a",
                  "b",
                  "c",
                ],
                "title": "Basic radio button example",
                "type": "string",
              },
              "title": "Basic radio button example",
              "titleMap": Array [
                Object {
                  "name": "a",
                  "value": "a",
                },
                Object {
                  "name": "b",
                  "value": "b",
                },
                Object {
                  "name": "c",
                  "value": "c",
                },
              ],
              "titles": Array [
                "a",
                "b",
                "c",
              ],
              "type": "select",
            }
          }
          onClick={[Function]}
        >
          <div
            aria-haspopup="listbox"
            className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onMouseDown={[Function]}
            role="button"
            tabIndex={0}
          >
            <span
              dangerouslySetInnerHTML={
                Object {
                  "__html": "&#8203;",
                }
              }
            />
          </div>
          <input
            aria-hidden={true}
            className="MuiSelect-nativeInput"
            onAnimationStart={[Function]}
            onChange={[Function]}
            required={false}
            tabIndex={-1}
            value=""
          />
          <svg
            aria-hidden={true}
            className="MuiSvgIcon-root MuiSelect-icon"
            focusable="false"
            viewBox="0 0 24 24"
          >
            <path
              d="M7 10l5 5 5-5z"
            />
          </svg>
        </div>
        <p
          className="MuiFormHelperText-root Mui-error"
          form={
            Object {
              "key": Array [
                "radios",
              ],
              "schema": Object {
                "enum": Array [
                  "a",
                  "b",
                  "c",
                ],
                "title": "Basic radio button example",
                "type": "string",
              },
              "title": "Basic radio button example",
              "titleMap": Array [
                Object {
                  "name": "a",
                  "value": "a",
                },
                Object {
                  "name": "b",
                  "value": "b",
                },
                Object {
                  "name": "c",
                  "value": "c",
                },
              ],
              "titles": Array [
                "a",
                "b",
                "c",
              ],
              "type": "select",
            }
          }
          value=""
        >
          should be equal to one of the allowed values
        </p>
      </div>
      <div
        className="MuiFormControl-root MuiFormControl-fullWidth"
        form={
          Object {
            "description": "Please write your comment here.",
            "key": Array [
              "comment",
            ],
            "maxlength": 20,
            "schema": Object {
              "description": "Please write your comment here.",
              "maxLength": 20,
              "title": "Comment",
              "type": "string",
              "validationMessage": "Don't be greedy!",
            },
            "title": "Comment",
            "type": "text",
            "validationMessage": "Don't be greedy!",
          }
        }
      >
        <label
          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
          data-shrink={false}
          form={
            Object {
              "description": "Please write your comment here.",
              "key": Array [
                "comment",
              ],
              "maxlength": 20,
              "schema": Object {
                "description": "Please write your comment here.",
                "maxLength": 20,
                "title": "Comment",
                "type": "string",
                "validationMessage": "Don't be greedy!",
              },
              "title": "Comment",
              "type": "text",
              "validationMessage": "Don't be greedy!",
            }
          }
          value=""
        >
          Comment
        </label>
        <div
          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
          form={
            Object {
              "description": "Please write your comment here.",
              "key": Array [
                "comment",
              ],
              "maxlength": 20,
              "schema": Object {
                "description": "Please write your comment here.",
                "maxLength": 20,
                "title": "Comment",
                "type": "string",
                "validationMessage": "Don't be greedy!",
              },
              "title": "Comment",
              "type": "text",
              "validationMessage": "Don't be greedy!",
            }
          }
          onClick={[Function]}
        >
          <input
            aria-invalid={false}
            className="MuiInputBase-input MuiInput-input"
            disabled={false}
            onAnimationStart={[Function]}
            onBlur={[Function]}
            onChange={[Function]}
            onFocus={[Function]}
            required={false}
            type="text"
            value=""
          />
        </div>
        <p
          className="MuiFormHelperText-root"
          form={
            Object {
              "description": "Please write your comment here.",
              "key": Array [
                "comment",
              ],
              "maxlength": 20,
              "schema": Object {
                "description": "Please write your comment here.",
                "maxLength": 20,
                "title": "Comment",
                "type": "string",
                "validationMessage": "Don't be greedy!",
              },
              "title": "Comment",
              "type": "text",
              "validationMessage": "Don't be greedy!",
            }
          }
          value=""
        >
          Please write your comment here.
        </p>
      </div>
    </fieldset>
  </div>
</div>
`;

exports[`samples types renders with the barebones decorator 1`] = `
<fieldset>
  <legend>
    Types
  </legend>
  <div>
    
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "string",
          ],
          "minlength": 3,
          "schema": Object {
            "minLength": 3,
            "type": "string",
          },
          "title": "",
          "type": "text",
        }
      }
      value=""
    >
      should NOT be shorter than 3 characters
    </p>
  </div>
  <div>
    
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "anotherstring",
          ],
          "minlength": 3,
          "schema": Object {
            "minLength": 3,
            "type": "string",
          },
          "title": "",
          "type": "text",
        }
      }
      value=""
    >
      should NOT be shorter than 3 characters
    </p>
  </div>
  <div>
    <label
      form={
        Object {
          "key": Array [
            "integer",
          ],
          "schema": Object {
            "type": "integer",
          },
          "title": "",
          "type": "integer",
        }
      }
      value={0}
    >
      integer
    </label>
    <input
      onChange={[Function]}
      type="integer"
      value={0}
    />
  </div>
  <div>
    <label
      focused={false}
      form={
        Object {
          "key": Array [
            "number",
          ],
          "schema": Object {
            "type": "number",
          },
          "title": "",
          "type": "number",
        }
      }
      htmlFor="['number']"
      value={0}
    >
      number
    </label>
    <input
      onChange={[Function]}
      type="number"
      value={0}
    />
  </div>
  <div>
    <label>
      <input
        checked={false}
        onChange={[Function]}
        type="checkbox"
      />
      
    </label>
  </div>
  <div>
    <label
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "radios",
          ],
          "schema": Object {
            "enum": Array [
              "a",
              "b",
              "c",
            ],
            "title": "Basic radio button example",
            "type": "string",
          },
          "title": "Basic radio button example",
          "titleMap": Array [
            Object {
              "name": "a",
              "value": "a",
            },
            Object {
              "name": "b",
              "value": "b",
            },
            Object {
              "name": "c",
              "value": "c",
            },
          ],
          "titles": Array [
            "a",
            "b",
            "c",
          ],
          "type": "select",
        }
      }
      value=""
    >
      Basic radio button example
    </label>
    <select
      error="should be equal to one of the allowed values"
      form={
        Object {
          "key": Array [
            "radios",
          ],
          "schema": Object {
            "enum": Array [
              "a",
              "b",
              "c",
            ],
            "title": "Basic radio button example",
            "type": "string",
          },
          "title": "Basic radio button example",
          "titleMap": Array [
            Object {
              "name": "a",
              "value": "a",
            },
            Object {
              "name": "b",
              "value": "b",
            },
            Object {
              "name": "c",
              "value": "c",
            },
          ],
          "titles": Array [
            "a",
            "b",
            "c",
          ],
          "type": "select",
        }
      }
      onChange={[Function]}
      value=""
    >
      <option
        value="a"
      >
        a
      </option>
      <option
        value="b"
      >
        b
      </option>
      <option
        value="c"
      >
        c
      </option>
    </select>
    <p
      error={true}
      form={
        Object {
          "key": Array [
            "radios",
          ],
          "schema": Object {
            "enum": Array [
              "a",
              "b",
              "c",
            ],
            "title": "Basic radio button example",
            "type": "string",
          },
          "title": "Basic radio button example",
          "titleMap": Array [
            Object {
              "name": "a",
              "value": "a",
            },
            Object {
              "name": "b",
              "value": "b",
            },
            Object {
              "name": "c",
              "value": "c",
            },
          ],
          "titles": Array [
            "a",
            "b",
            "c",
          ],
          "type": "select",
        }
      }
      value=""
    >
      should be equal to one of the allowed values
    </p>
  </div>
  <div>
    <label
      form={
        Object {
          "description": "Please write your comment here.",
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "schema": Object {
            "description": "Please write your comment here.",
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy!",
          },
          "title": "Comment",
          "type": "text",
          "validationMessage": "Don't be greedy!",
        }
      }
      value=""
    >
      Comment
    </label>
    <input
      onChange={[Function]}
      type="text"
      value=""
    />
    <p
      error={false}
      form={
        Object {
          "description": "Please write your comment here.",
          "key": Array [
            "comment",
          ],
          "maxlength": 20,
          "schema": Object {
            "description": "Please write your comment here.",
            "maxLength": 20,
            "title": "Comment",
            "type": "string",
            "validationMessage": "Don't be greedy!",
          },
          "title": "Comment",
          "type": "text",
          "validationMessage": "Don't be greedy!",
        }
      }
      value=""
    >
      Please write your comment here.
    </p>
  </div>
</fieldset>
`;
